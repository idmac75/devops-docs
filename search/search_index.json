{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about.html","title":"About","text":"<p>Welcome to my DevOps page. My name is Scott McCarthy and I am a professional DevOps engineer.</p> <p>I love to help people with their technology challenges, particularly in the DevOps space so decided the best way I can help is to capture my knowledge in the form of a Wiki.</p> <p>If you would like to know more about me, then please see my LinkedIn page Bio</p>"},{"location":"best-practices.html","title":"Practice Overview","text":"<p>From a 'Best-Practice' point of view , this section of the site is structured something similar to Microsofts FOUR pillars of DevOps, with the additional areas of interest such as Quality, Security, Collaboration &amp; Improvement:</p> <p></p> <p>Below you can learn more about each particular DevOps best practice.</p> <ul> <li>Continuous Planning<ul> <li>Agile Development</li> <li>Design Reviews</li> </ul> </li> <li>Continuous Integration</li> <li>Continuous Delivery</li> <li>Continuous Quality</li> <li>Continuous Security</li> <li>Continuous Operations</li> <li>Continuous Collaboration</li> <li>Continuous Improvement</li> </ul>"},{"location":"home.html","title":"Home","text":""},{"location":"home.html#welcome-aboard","title":"Welcome Aboard","text":"<p>Welcome to my DevOps page. My name is Scott McCarthy and I am a professional DevOps engineer.</p> <p>I love to help people with their technology challenges, particularly in the DevOps space so decided the best way I can help is to capture my knowledge in the form of a Wiki.</p> <p>If you would like to know more about me, then please see my LinkedIn page Bio</p>"},{"location":"home.html#why-another-devops-site","title":"Why Another DevOps Site?","text":"<p>Why; simply put I have been working in a software integration role since 2007 (so even before it was labelled DevOps) and up till this point I have mostly been reading and consuming other people work. There are so many great documents and articles out there on the internet, I have not really found the need to write anything of substance.. and then I came across the Microsoft CSE teams Github page where they have captured all of their teams working practices and published them as an open-source engineering playbook.</p> <p>So firstly a big shout out to the Microsoft CSE for inspiring me to actually start to capture my own knowledge and experiences in the form of this DevOps Docs site.</p>"},{"location":"home.html#site-structure","title":"Site Structure","text":"<p>I will be aiming to cover the following sections/topics on this site</p> Topic Description Fundamentals For those just getting starting in the DevOps space. Best Practices A comprehensive guide on DevOps best practices Tools As or when I come across specific information on the tooling that I typically use I will add it to this section Learning A Learning section to help with study guides that I Create, plus any useful info I find that will help people with learning."},{"location":"learning.html","title":"DevOps Learning Overview","text":"<p>PLACEHOLDER</p>"},{"location":"the-basics.html","title":"The Basics","text":""},{"location":"the-basics.html#devops-model-defined","title":"DevOps Model Defined","text":"<p>DevOps is the combination of cultural philosophies, practices, and tools that increases an organization\u2019s ability to deliver applications and services at high velocity: evolving and improving products at a faster pace than organizations using traditional software development and infrastructure management processes. This speed enables organizations to better serve their customers and compete more effectively in the market.</p>"},{"location":"the-basics.html#how-devops-works","title":"How DevOps Works","text":"<p>Under a DevOps model, development and operations teams are no longer \u201csiloed.\u201d Sometimes, these two teams are merged into a single team where the engineers work across the entire application lifecycle, from development and test to deployment to operations, and develop a range of skills not limited to a single function. In some DevOps models, quality assurance and security teams may also become more tightly integrated with development and operations and throughout the application lifecycle. When security is the focus of everyone on a DevOps team, this is sometimes referred to as DevSecOps.These teams use practices to automate processes that historically have been manual and slow. They use a technology stack and tooling which helps them operate and evolve applications quickly and reliably. These tools also help engineers independently accomplish tasks (for example, deploying code or provisioning infrastructure) that normally would have required help from other teams, and this further increases a team\u2019s velocity.</p>"},{"location":"the-basics.html#benefits-of-devops","title":"Benefits of DevOps","text":"<p>Speed - Move at a high velocity so you can innovate for customers faster, adapt to changing markets better, and grow more efficiently at driving business results. The DevOps model enables your developers and operations teams to achieve these results. For example, micro-services continuous delivery lets teams take ownership of services and then release updates to them quicker.</p> <p>Rapid Delivery - Increase the frequency and pace of releases so you can innovate and improve your product faster. The quicker you can release new features and fix bugs, the faster you can respond to your customers\u2019 needs and build a competitive advantage. and Continuous integrations are practices that automate the software release process, from build to deploy.</p> <p>Reliability - Ensure the quality of application updates and infrastructure changes so you can reliably deliver at a more rapid pace while maintaining a positive experience for end-users. Use practices like and to test that each change is continuous integration continuous delivery functional and safe. practices help you stay informed of performance in real-time.</p> <p>Scale - Operate and manage your infrastructure and development processes at scale. Automation and consistency help you manage complex or changing systems efficiently and with reduced risk. For example, helps you manage your development, testing, and infrastructure as code production environments in a repeatable and more efficient manner.</p> <p>Improved Collaboration - Build more effective teams under a DevOps cultural model, which emphasizes values such as ownership and accountability. Developers and operations teams closely, share many responsibilities and combine their workflows. This reduces inefficiencies and saves time (e.g. reduced handover periods between developers and operations, writing code that takes into account the environment in which it is run).</p> <p>Security - Move quickly while retaining control and preserving compliance. You can adopt a DevOps model without sacrificing security by using automated compliance policies, fine-grained controls, and configuration management techniques. For example, using infrastructure as code and you can define and then track compliance at scale.</p>"},{"location":"the-basics.html#why-devops-matters","title":"Why DevOps Matters","text":"<p>Software and the Internet have transformed the world and its industries, from shopping to entertainment to banking. Software no longer merely supports a business; rather it becomes an integral component of every part of a business. Companies interact with their customers through software delivered as online services or applications and on all sorts of devices. They also use software to increase operational efficiencies by transforming every part of the value chain, such as logistics, communications, and operations. In a similar way that physical goods companies transformed how they design, build, and deliver products using industrial automation throughout the 20th century, companies in today\u2019s world must transform how they build and deliver software.</p>"},{"location":"the-basics.html#resources","title":"Resources","text":"<ul> <li>What is DevOps</li> <li>How to become a DevOps Engineer</li> </ul>"},{"location":"tools.html","title":"DevOps Tools Overview","text":"<p>This page will contain a list of DevOps related tooling</p>"},{"location":"tools.html#planning","title":"Planning","text":""},{"location":"tools.html#code","title":"Code","text":""},{"location":"tools.html#git-scm","title":"Git SCM","text":"<ul> <li>Git Cheatsheet</li> </ul>"},{"location":"tools.html#build","title":"Build","text":""},{"location":"tools.html#test","title":"Test","text":""},{"location":"tools.html#release","title":"Release","text":""},{"location":"tools.html#deploy","title":"Deploy","text":""},{"location":"tools.html#operate","title":"Operate","text":""},{"location":"tools.html#monitor","title":"Monitor","text":""},{"location":"best-practices/continuous-delivery.html","title":"Continuous Delivery","text":"<p>Continuous delivery is a software development practice where code changes are automatically built, tested, and prepared for a release to production. It expands upon continuous integration by deploying all code changes to a testing environment and/or a production environment after the build stage. When continuous delivery is implemented properly, developers will always have a deployment-ready build artifact that has passed through a standardized test process.</p>"},{"location":"best-practices/continuous-integration.html","title":"Continuous Integration","text":"<p>Continuous integration is a software development practice where developers regularly merge their code changes into a central repository, after which automated builds and tests are run. The key goals of continuous integration are to find and address bugs quicker, improve software quality, and reduce the time it takes to validate and release new software updates.</p>"},{"location":"best-practices/continuous-planning.html","title":"Continuous Planning","text":"<p>Traditional development teams used to plan all their features up front (aka Waterfall style), or in some cases for the entire year ahead. A big bang release would follow months of design, development and if you are lucky testing.</p> <p>The problem with such long term plans are that they tend to become obsolete very quickly. They also delay any return of investment to when the application or service will be released. Also requirements are rarely clear at the start of a project and late feedback can cause a lot of money to be wasted.</p> <p></p> <p>Continuous planning advocates for more flexibility on the scope of the deliverable, trying to keep the cost of projects fixed and providing a faster return of investment by shipping high-value features in iterations first. At the heart of all continuous improvement is the Deming's Plan-Do-Check-Act cycle.</p> <p></p> <p>the key steps in this cycle are:</p> <ul> <li>Plan \u2013 determine the critical success factors for the process you are trying to improve, establish measurements that will assess your performance in these key result areas, and establish targets against which actual performance will be compared.</li> <li>Do \u2013 execute the process which you are measuring and capture the data which allows you to assess the performance of that process</li> <li>Check \u2013 compare actual performance with the target previously established and understand the reasons for variances</li> <li>Act \u2013 implement the actions necessary to make improvements</li> </ul> <p>This feeds the different phases of development and operations. Also addressing changes and evolutions according to a continuous improvement process, based on continuous feedback. It\u2019s also important that Business and Management teams get the appropriate training on tools and metrics in order to have enough visibility of the project\u2019s development.</p> <p>Continuous Planning will enable your team to provide a constant flow of functionalities by having a continuously updated plan in place, adjusted to the business requirements. Continuous Integration will implement the plan and provide feedback on development speed to ensure a realistic plan is in place.</p> <p>Continuous Planning is a practice that requires planners, architects, and agile development teams to integrate their plans across the enterprise on an ongoing basis. It relies on six principles:</p> <ul> <li>Value simplicity</li> <li>The manifesto for agile software development</li> <li>Design thinking</li> <li>Iterative and incremental development</li> <li>Lean management</li> <li>Estimation accuracy</li> </ul>"},{"location":"best-practices/infrastructure-as-code.html","title":"Infrastructure as Code","text":"<p>PLACEHOLDER</p>"},{"location":"best-practices/monitoring-and-logging.html","title":"Monitoring and Logging","text":"<p>Organizations monitor metrics and logs to see how application and infrastructure performance impacts the experience of their product\u2019s end user. By capturing, categorizing, and then analyzing data and logs generated by applications and infrastructure, organizations understand how changes or updates impact users, shedding insights into the root causes of problems or unexpected changes. Active monitoring becomes increasingly important as services must be available 24/7 and as application and infrastructure update frequency increases. Creating alerts or performing real-time analysis of this data also helps organizations more proactively monitor their services.</p>"},{"location":"best-practices/continuous-planning/agile-development.html","title":"Agile Development","text":"<p>Agile is an iterative approach to project management and software development that helps teams deliver value to their customers faster and with fewer headaches. Instead of betting everything on a \"big bang\" launch, an agile team delivers work in small, but consumable, increments. Requirements, plans, and results are evaluated continuously so teams have a natural mechanism for responding to change quickly.</p> <p>For more info see this blog on the Agile Manifesto</p>"},{"location":"best-practices/continuous-planning/agile-development.html#sections-in-agile-development","title":"Sections in Agile Development","text":"<ul> <li>Backlog Management</li> <li>Collaboration</li> <li>Delivery Plan</li> <li>Retrospectives</li> <li>Scrum of Scrums</li> <li>Sprint Planning</li> <li>Standups</li> <li>Team Agreements</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews.html","title":"Design Reviews","text":"<p>Designing software well is hard.</p> <p>Below are number of practices which I find help in the design process. This covers not only technical design of software, but also architecture design and non-functional requirements gathering for new projects.</p>"},{"location":"best-practices/continuous-planning/design-reviews.html#goals","title":"Goals","text":"<ul> <li>Provide recommendations for how to design software for maintainability, ease of extension, adherence to best practices, and sustainability.</li> <li>Reference or define process or checklists to help ensure well-designed software.</li> <li>Collate and point to reference sources (guides, repos, articles) that can help shortcut the learning process.</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews.html#sections","title":"Sections","text":"<ul> <li>Design Patterns</li> <li>Non-Functional Requirements Guidance</li> <li>Sustainable Software Engineering</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html","title":"Backlog Management","text":""},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#what-is-backlog-management","title":"What is Backlog Management","text":"<p>Backlog management is the process by which the product owner (often in collaboration with others) adds, adjusts, grooms, and prioritizes backlog items within the backlog to make sure the most valuable product is shipped to customers. An oversized product backlog is a problem that indicates the team have either taken on too much work or they have other challenges that need addressing.</p> <p>Backlog management can be broken down into the following sub-sections:</p> <ul> <li>Backlog Refinement</li> <li>Minimal Slices</li> <li>External Feedback</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#backlog-refinement","title":"Backlog Refinement","text":""},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#goals","title":"Goals","text":"<p>What are the intended outcomes of the ceremonies?</p> <p>Backlog refinement is when the product owner and some, or all, of the rest of the team review items on the backlog to ensure the backlog contains the appropriate items, that they are prioritized, and that the items at the top of the backlog are ready for development. This activity occurs on a regular basis and may be an officially scheduled meeting or an ongoing activity.</p>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#participation","title":"Participation","text":"<p>What members of the team should participate?</p> <p>Ideally all the team members could participate. This is an ongoing process in which the Product Owner and the Development Team collaborate on the details of Product Backlog items.</p>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#impact","title":"Impact","text":"<p>What positive impact has been observed as a result of this practice?</p> <p>The intent of backlog refinement is to ensure that the backlog keeps updating with items that are appropriate to their priority, i.e. higher priority items are with more details than lower priority ones. Also, it is important that at any time there are enough user stories ready for planning in the next or even, where reasonable, the next two or three iterations but not too much further.</p>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#measures","title":"Measures","text":"<p>How might one measure the impact of this ceremony positive or negative?</p> <p>The expected outcome from the backlog refinement is all the team members are on the same page of what they are going to implement in the next or next few iterations with priority. A positive outcome of refinement is one where each backlog item can reasonably be \u201cdone\u201d within the sprint time. Product backlog items that can be \u201cdone\u201d by the development team within one sprint are deemed \u201cready\u201d for selection in a sprint planning.</p>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#facilitation-guidance","title":"Facilitation Guidance","text":"<p>How might one go about running the ceremony? Is there a general pattern that the ceremony should follow?</p> <ul> <li>Product Owner: presents the ordered backlog and backlog list they'd like in the next iteration.</li> <li>Process Lead: ensure the timebox.</li> <li>Team members: ask questions and request additional details on the backlog if needed.</li> </ul> <p>Make sure that the team does not focus on how to implement the items. Instead, the Product Owner and Team discuss the goals and context for these high - priority items on the Product Backlog, providing the Team with insight into the Product Owner\u2019s thinking.</p>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#minimalism-slices","title":"Minimalism Slices","text":"<p>Minimalism Slices, simply refers to the practice of breaking down pieces of work so they can be ackomlished in a reasonable time frame.</p> <ul> <li> <p>Split your work item into small chunks that are contributed in incremental commits.</p> </li> <li> <p>Contribute your chunks frequently. Follow an iterative approach by regularly providing updates and changes to the team. This allows for instant feedback and early issue discovery and ensures you are developing in the right direction, both technically and functionally.</p> </li> <li> <p>Do NOT work independently on your task without providing any updates to your team.</p> </li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#example-of-a-bad-approach","title":"Example of a Bad approach","text":"<p>After six weeks of work you created PR with all required functionality, including portal UI (build settings), backend REST API (UWP build functionality), telemetry, unit and integration tests, etc.</p>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#example-of-a-good-approach","title":"Example of a Good approach","text":"<p>You divided your feature into smaller user stories (which in turn were divided into multiple tasks) and started working on them one by one:</p> <ul> <li>As a user I can successfully build UWP apps using current service</li> <li>As a user I can see telemetry when building the apps</li> <li>As a user I have the ability to select build configuration (debug, release)</li> <li>As a user I have the ability to select target platform (arm, x86, x64)</li> <li>...</li> </ul> <p>You also divided your stories into smaller tasks and sent PRs based on those tasks. E.g. you have the following tasks for the first user story above:</p> <ul> <li>Enable UWP platform on backend</li> <li>Add <code>build</code> button to the UI (build first solution file found)</li> <li>Add <code>select solution file</code> dropdown to the UI</li> <li>Implement unit tests</li> <li>Implement integration tests to verify build succeeded</li> <li>Update documentation</li> <li>...</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#external-feedback","title":"External Feedback","text":"<p>Various stakeholders can provide feedback to the working product during a project, beyond any formal review and feedback sessions required by the organization. The frequency and method of collecting feedback through reviews varies depending on the case, but a couple of good practices are:</p>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#best-practices-for-external-feedback","title":"Best Practices for External Feedback","text":"<ul> <li>Capture each review in the backlog as a separate user story.</li> <li>Standardize the tasks that implement this user story.</li> <li>Plan for a review user story per Epic / Feature in your backlog proactively.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#tips-on-giving-feedback","title":"Tips on giving feedback","text":"<ul> <li>Give feedback after it\u2019s asked for. Chiming in during the developmental phase with suggestions and ideas will irritate the developers and collaborators.</li> <li>Ask questions first. Try to understand why things are this way and the thought process or the justification behind it.</li> <li>Only relay the things under the receiver\u2019s control. Giving design feedback to the developer will not help in any way. In general, feedback is usually received by one person who classifies the received reviews and forwards them to the right collaborators.</li> <li>Be concise and specific with examples. While suggesting something, give proper reasoning and provide some examples for the same.</li> <li>Give feedback that will improve the product. Any feedback that you provide should be aimed at that.</li> <li>End with a request for opinions. It\u2019s important to know how the receiver of the feedback feels about your ideas and suggestions.</li> </ul> <p>Example: Feedback like \u201cthe homepage doesn\u2019t feel good\u201d will not help the dev team. Instead say something like \u201cthe homepage doesn\u2019t show information that\u2019s relevant to me as a user.\u201d The latter helps isolate the issue that the problem lies with the content or the way content is presented.</p>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#tips-on-receiving-feedback","title":"Tips on receiving feedback","text":"<ul> <li>Listen to understand and not to reply. Figure out the intent behind the feedback.</li> <li>Be honest and open while providing justifications for your decisions regarding the design.</li> <li>A good reason provided to the reviewer should precede refuting suggestions as to why their opinion and feedback will not work well.</li> <li>Try to figure out why particular feedback is given. Ask detailed questions in regard to that element of the product.</li> <li>Propose off-the-top alternatives and see if the reviewer is inclined to accept any of all them. It will help understand what is desired.</li> <li>Follow up. If there are a few suggestions that require a bit of research on your part, hit pause on that conversation and get back to that later.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/backlog-management.html#useful-links","title":"Useful Links","text":"<ul> <li>Backlog Refinement: Who Should Attend and How to Maximize Value</li> <li>You're doing backlog refinement wrong. Here's how to do it less wrong</li> <li>multi team backlog refinement</li> <li>Product Backlog Refinement explained</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/collaboration.html","title":"Collaboration","text":""},{"location":"best-practices/continuous-planning/agile-development/collaboration.html#why-collaboration-is-important","title":"Why collaboration is important","text":"<p>In engagements, we aim to be highly collaborative because when we code together, we perform better, have a higher sprint velocity, and have a greater degree of knowledge sharing across the team.</p> <p>There are two common patterns we use for collaboration: Pairing and swarming.</p> <ul> <li> <p>Pair programming (\u201cpairing\u201d) - two software engineers assigned to, and working on, one shared story at a time during the sprint. The Dev Lead assigns a user story to two engineers -- one primary engineer (story owner) and one secondary engineer (pairing assignee). The definition aligns with the Agile Alliance\u2019s definition.</p> </li> <li> <p>Swarm programming (\u201cswarming\u201d) - three or more software engineers collaborating on a high-priority item to bring it to completion.</p> </li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/collaboration.html#how-to-pair-program","title":"How to pair program","text":"<p>As mentioned, every story is intentionally assigned to a pair. The pairing assignee may be in the process of up-skilling, nevertheless, they are equal partners in the development effort. Below are some general guidelines for pairing:</p> <ul> <li>Upon assignment of the story/product backlog item (PBI), the pair needs to be deliberate about defining how to work together and have a firm definition of the work to be completed. This information should be expressed clearly in the story\u2019s description and acceptance criteria. The expectations about this need to be communicated and agreed upon by both engineers and should be done prior to any actual working sessions.</li> <li>The story owner and pairing assignee do not merely split the work up and sync regularly \u2013 they actively work together on the same tasks, and might share their screens via a Teams online session. Collaborative tools like VS Live Share can be preferable to sharing screens. Not all collaboration needs to be screen-share based.</li> <li>During the collaborative sessions, one engineer provides the development environment while the other actively views and comments verbally.</li> <li>Engineers trade places often from one session to the next so that everyone has time in control of the keyboard.</li> <li>Engineers leverage feature branches for the collaboration during the development of each story to have small Pull Requests (PRs) (as opposed to a single giant PR) at the end of the sprint.</li> <li>Code is committed to the repository by both members of the assigned pair where and when it makes sense as tasks were completed.</li> <li>The pairing assignee is the voice representing the pair during the daily standup while being supported by the story owner.</li> <li>Having the names of both individuals (owner and pair assignee) visible on the PBI can be helpful during sprint ceremonies and lead to greater accountability by the pairing assignee.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/collaboration.html#why-pair-programming-helps-collaboration","title":"Why pair programming helps collaboration","text":"<p>Pair programming helps collaboration because both engineers share equal responsibility for bringing the story to completion. This is a mutually beneficial exercise because, while the story owner often has more experience to lean on, the pairing assignee brings a fresh view that is unclouded by repetition.</p> <p>Some other benefits include:</p> <ul> <li>Fewer defects and increased accountability. Having two sets of eyes allows the engineers more opportunity to catch errors and to remember often-overlooked tasks such as writing unit and integration tests.</li> <li>Pairing allows engineers with different experience and expertise to learn from one another by collaborating and receiving feedback in real-time. Instead of having an engineer work alone on a task for long hours and hit an isolation breaking point, pairing allows the pair to check in with one another.</li> <li>Even something as simple as describing the problem out loud can help uncover issues or bugs in the code.</li> <li>Pairing can help brainstorming as well as validating details such as making the variable names consistent.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/collaboration.html#when-to-swarm-program","title":"When to swarm program","text":"<p>It is important to know that not every PBI needs to use swarming. Some sprints may not even warrant swarming at all. Swarm when:</p> <ul> <li>The work is complex enough to have collective minds collaborating (not because the quantity of work is more than what would be completed in one sprint).</li> <li>The task that the swarm works on has become (or is in imminent danger of becoming) a blocker to other stories.</li> <li>An unknown is discovered that needs a collaborative effort to form a decision on how to move forward. The collective knowledge and expertise help move the story forward more quickly and ultimately produced better quality code.</li> <li>A conflict or unresolved difference of opinion arises during a pairing session. Promote the work to become a swarming session to help resolve the conflict.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/collaboration.html#how-to-swarm-program","title":"How to swarm program","text":"<p>As soon the pair finds out that the PBI will warrant swarming, the pair brings it up to the rest of the team (via parking lot during stand-up or asynchronously). Members of the team agree or volunteer to assist.</p> <ul> <li>The story owner (or pairing assignee) sends Teams call invite to the interested parties. This allows the swarm to have dedicated focus time by blocking time in calendars.</li> <li>During a swarming session, an engineer can branch out if there is something that needs to be handled while the swarm tackles the main problem at hand, then reconnects and reports back. This allows the swarm to focus on a core aspect and to be all on the same page.</li> <li>The Teams call is repeated until resolution is found or alternative path forward is formulated.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/collaboration.html#why-swarm-programming-helps-collaboration","title":"Why swarm programming helps collaboration","text":"<ul> <li>Swarming allows the collective knowledge and expertise of the team to come together in a focused and unified way.</li> <li>Not only does swarming help close out the item faster, but it also helps the team understand each other\u2019s strengths and weaknesses.</li> <li>Allows the team to build a higher level of trust and work as a cohesive unit.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/collaboration.html#when-to-decide-to-swarm-pair-andor-split","title":"When to decide to swarm, pair, and/or split","text":"<ul> <li>While a lot of time can be spent on pair programming, it does make sense to split the work when folks understand how the work will be carried out, and the work to be done is largely prescriptive.</li> <li>Once the story has been jointly tasked out by both engineers, the engineers may choose to tackle some tasks separately and then combine the work together at the end.</li> <li>Pair programming is more helpful when the engineers do not have perfect clarity about what is needed to be done or how it can be done.</li> <li>Swarming is done when the two engineers assigned to the story need an additional sounding board or need expertise that other team members could provide.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/collaboration.html#benefits-of-increased-collaboration","title":"Benefits of increased collaboration","text":"<p>Knowledge sharing and bringing customer engineers together in a \u2018code-with\u2019 manner is an important aspect of any engagement. This grows both our customers\u2019 and our team\u2019s capability to build on Azure. We are responsible for demonstrating engineering fundamentals and leaving the customer in a better place after we disengage. This can only happen if we collaborate and engage together as a team. In addition to improved software quality, this also adds a beneficial social aspect to the engagements.</p>"},{"location":"best-practices/continuous-planning/agile-development/collaboration.html#resources","title":"Resources","text":"<ul> <li> <p>On Pair Programming - Martin Fowler</p> </li> <li> <p>Pair Programming hands-on lessons - these can be used (and adapted) to support bringing pair programming into your team.</p> </li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/delivery-plan.html","title":"Delivery Plan","text":""},{"location":"best-practices/continuous-planning/agile-development/delivery-plan.html#overview","title":"Overview","text":"<p>While Scrum does not require and discourages planning more than one sprint at a time. Most of us work in enterprises where we are dependent outside teams (for example: marketing, sales, support or other development teams).</p> <p>A rough assessment of the planned project scope is achievable within a reasonable time frame and resources. The goal is to have a rough plan and estimate as a starting point, not to implement \"Agile-fall or Wagile.\"</p> <p>Note that this is just a starting point to enable planning discussions. We expect the actual schedule to evolve and shift over time and that you will update the scope and timeline as you progress.</p> <p>Delivery Plans ensure your teams are aligning with your organizational goals.</p>"},{"location":"best-practices/continuous-planning/agile-development/delivery-plan.html#benefits","title":"Benefits","text":"<ul> <li>As you complete the assessment, you can push back on the scope, time frame or ask for more resources.</li> <li>As you progress in your project/product delivery, you can highlight risks to the scope, time frame, and resources.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/delivery-plan.html#approach","title":"Approach","text":"<p>One approach you can take to accomplish is with stickies and a spreadsheet.</p> <p>Step 1: Stack rank the features for everything in your backlog</p> <ul> <li>Functional Features</li> <li>Non-functional Features</li> <li>User Research and Design</li> <li>Testing</li> <li>Documentation</li> <li>Knowledge Transfer/Support Processes</li> </ul> <p>Step 2: T-Shirt Features in terms of working weeks per person. In some scenarios, you have no idea how complex the work. In this situation, you can ask for time to conduct a spike (timebox the effort so you can get back on time).</p> <p>Step 3: Calculate the capacity for the team based on the number of weeks person with his/her start and end date and minus holidays, vacation, conferences, training, and onboarding days. Also, minus time if the person is also working on defects and support.</p> <p>Step 4: Based on your capacity, you now have the options</p> <ul> <li>Ask for more resources. Caution: onboarding new resources take time.</li> <li>Reduce the scope to the most MVP. Caution: as you trim more of the scope, it might be valuable anymore to the customer. Consider a cupcake which is everything you need. You don't want to skim on the frosting.</li> <li>Ask for more time. Usually, this is the most flexible, but if there is a marketing date that you need to hit, this might be as flexible.</li> </ul> <p>Delivery Plans provide a schedule of stories or features your team plan to deliver. Delivery Plans show the scheduled work items by a sprint (iteration path) of selected teams against a calendar view.</p>"},{"location":"best-practices/continuous-planning/agile-development/delivery-plan.html#tools","title":"Tools","text":"<p>Delivery Plans (part of Azure DevOps), Confluence &amp; JIRA, Trello, Rally, Asana, Basecamp, and Github Issues are just some of the best Agile planning tools in the market (some are free, others you pay a monthly fee, or you can install on-prem) that you can leverage.</p>"},{"location":"best-practices/continuous-planning/agile-development/retrospectives.html","title":"Retrospectives","text":""},{"location":"best-practices/continuous-planning/agile-development/retrospectives.html#what-is-an-agile-retrospective","title":"What is an Agile retrospective?","text":"<p>An Agile retrospective is a meeting that's held at the end of an iteration in Agile software development. During the retrospective, the team reflects on what happened in the iteration and identifies actions for improvement going forward. The aim of a retrospective is to:</p> <ol> <li>Continually learn from our engagement, improving our ability to deliver value to our customers.</li> <li>Involve everyone in the learning and improvement.</li> <li>The dev team and the larger org learn from each engagement.</li> </ol>"},{"location":"best-practices/continuous-planning/agile-development/retrospectives.html#evidence-and-measures","title":"Evidence and Measures","text":"<p>At the end of each milestone or engagement, the team will write up the results of their retrospective, including 1-3 proposed changes or experiments. Owners will be assigned to each item, to make sure that retrospection leads to action, when desired.</p> <p>Proposed changes coming out of iteration retrospectives should be tracked as tasks or bugs in the project backlog.</p>"},{"location":"best-practices/continuous-planning/agile-development/retrospectives.html#general-guidance","title":"General Guidance","text":"<p>This Agile playbook by Atlassian provides a clear script for conducting retrospectives. Every retrospective should follow some version of the script, depending on the length of the retrospective. The basic script is:</p> <ol> <li>Prep.</li> <li>Set the stage.</li> <li>What we did well.</li> <li>What we can do better .</li> <li>Actions.</li> <li>Close the retrospective.</li> </ol> <p>Within that script, the facilitator can make choices with regard to which activities to use for each element. If it suits your team you can even run different variations of a retrospective to suit different use cases such as:</p>"},{"location":"best-practices/continuous-planning/agile-development/retrospectives.html#project-or-milestone-retrospective","title":"Project or Milestone Retrospective","text":"<p>These are the most intense retrospectives, in that they cover more project working time and should be the strictest with regard to following the ceremony described in the retrospective book. The goal of most project or milestone retrospectives is to identify proposed changes that the team might try in the next project. Teams should cover the overall project or milestone, including the development phase, how the on-site hack went, how well the customer engagement team did, how well the wrap up activities went, how well the whole project team worked together, etc.</p> <p>A project or milestone retrospective will usually take 3-4 hours, depending on how long or complex the milestone was and how many people are involved in the retrospective</p> <p>It is recommended that due to the complexity of project level milestones it is recommended that you ensure you have an experienced facilitator to run this retrospective.</p>"},{"location":"best-practices/continuous-planning/agile-development/retrospectives.html#iteration-retrospective","title":"Iteration Retrospective","text":"<p>Iteration reviews should follow the ceremony of the retrospective script, but using less time and fewer activities than the project or milestone retrospective. Iteration (sprint) retrospectives will focus more on execution and implementation details and how the team can improve execution for future iterations.</p> <p>An iteration retrospective will usually take 1-2 hours.</p> <p>Usually, the Process Lead or Dev Lead will conduct the first one or two iteration retrospectives. After that, it's good for the team to take turns.</p>"},{"location":"best-practices/continuous-planning/agile-development/retrospectives.html#single-day-iteration-retrospective","title":"Single-Day Iteration Retrospective","text":"<p>This variation assumes that the team is running an iteration per day, which is common in code-with engagements or hacks that have higher levels of uncertainty. In a single-day sprint, the team runs a 15-30 minute planning session for the day, conducts at least one standup (frequently immediately after lunch), and has a short demo, followed by a short retrospective at the end of the day.</p> <p>A single-day iteration retrospective will usually take 15-30 minutes.</p>"},{"location":"best-practices/continuous-planning/agile-development/retrospectives.html#recommended-activity-recipes","title":"Recommended Activity Recipes","text":"<p>Below are recommended commendations of activities to use in the slots above.</p>"},{"location":"best-practices/continuous-planning/agile-development/retrospectives.html#tough-project-milestone","title":"Tough Project Milestone","text":"<p>Typically used when you have just had a tough period and to give participants a chance to vent before getting into the more analytical parts of the retrospective.</p>"},{"location":"best-practices/continuous-planning/agile-development/retrospectives.html#resources","title":"Resources","text":"<ul> <li>Agile Retrospectives: Making Good Teams Great</li> <li>Agile playbook by Atlassian</li> <li>Chatham House Rules</li> <li>Scrum.org - what is a sprint retrospective</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/scrum-of-scrums.html","title":"Scrum of Scrums","text":""},{"location":"best-practices/continuous-planning/agile-development/scrum-of-scrums.html#overview","title":"Overview","text":"<p>Scrum of scrums is a technique used to scale Scrum to a larger group working towards the same project goal. In Scrum, we consider a team being too big when going over 10-12 individuals. This should be decided on a case by case basis. If the project is set up in multiple work streams that contain a fixed group of people and a common stand-up meeting is slowing down productivity: scrum of scrums should be considered. The team would identify the different subgroups that would act as a separate scrum teams with their own backlog, board and stand-up.</p>"},{"location":"best-practices/continuous-planning/agile-development/scrum-of-scrums.html#goals","title":"Goals","text":"<p>The goal of the scrum of scrums ceremony is to give sub-teams the agility they need while not loosing visibility and coordination. It also helps to ensure that the sub-teams are achieving their sprint goals, and they are going in the right direction to achieve the overall project goal.</p> <p>The scrum of scrums ceremony happens every day and can be seen as a regular stand-up:</p> <ul> <li>What was done the day before by the sub-team.</li> <li>What will be done today by the sub-team.</li> <li>What are blockers or other issues for the sub-team.</li> <li>What are the blockers or issues that may impact other sub-teams.</li> </ul> <p>The outcome of the meeting will result in a list of impediments related to coordination of the whole project. Solutions could be: agreeing on interfaces between teams, discussing architecture changes, evolving responsibility boundaries, etc.</p> <p>This list of impediments is usually managed in a separate backlog but does not have to.</p>"},{"location":"best-practices/continuous-planning/agile-development/scrum-of-scrums.html#participation","title":"Participation","text":"<p>The common guideline is to have on average one person per sub-team to participate in the scrum of scrums. Ideally, the Process Lead of each sub-team would represent them in this ceremony. In some instances, the representative for the day is selected at the end of each sub-team daily stand-up and could change every day. In practice, having a fixed representative tends to be more efficient in the long term.</p>"},{"location":"best-practices/continuous-planning/agile-development/scrum-of-scrums.html#impact","title":"Impact","text":"<p>This practice is helpful in cases of longer projects and with a larger scope, requiring more people. When having more people, it is usually easier to divide the project in sub-teams. Having a daily scrum of scrums improves communication, lowers the risk of integration issues and increases the project chances of success.</p> <p>When choosing to implement Scrum of Scrums, you need to keep in mind that some team members will have additional meetings to coordinate and participate in. Also: all team members for each sub-team need to be updated on the decisions at a later point to ensure a good flow of information.</p>"},{"location":"best-practices/continuous-planning/agile-development/scrum-of-scrums.html#measures","title":"Measures","text":"<p>The easiest way to measure the impact is by tracking the time to resolve issues in the scrum of scrums backlog. You can also track issues reported during the retrospective related to global coordination (is it well done? can it be improved?).</p>"},{"location":"best-practices/continuous-planning/agile-development/scrum-of-scrums.html#facilitation-guidance","title":"Facilitation Guidance","text":"<p>This should be facilitated like a regular stand-up.</p>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning.html","title":"Sprint Planning","text":""},{"location":"best-practices/continuous-planning/agile-development/sprint-planning.html#overview","title":"Overview","text":"<p>During the sprint planning, the team discusses and agrees on the scope for the upcoming sprint.</p>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning.html#goals","title":"Goals","text":"<ul> <li>Select the stories that will be implemented in the sprint.</li> <li>Estimate the effort required for the stories in the sprint.</li> <li>Split the stories into tasks.</li> </ul> <p>General guidance:</p> <ul> <li>The sprint planning should happen at the beginning of the new sprint (or at the end of the previous one). It usually lasts between 1 and 4 hours depending on the size of the team and duration of the sprint.</li> <li>Each story should be able to be completed within the duration of the sprint. Otherwise, the story should be broken up into multiple stories.</li> <li>Each task duration should be somewhere between 2 and 8 hours.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning.html#participation","title":"Participation","text":"<p>Everyone in the team should participate in the sprint planning, including the Product Owner.</p> <p>Specific roles:</p> <p>The ScrumMaster:</p> <ul> <li>Facilitate the conversation.</li> <li>Ensure everyone is heard.</li> <li>Remind scrums/agile/other principles and sprint planning goals if necessary, updating the working agreement where needed to ensure a mapping between principals and what is working/not working for the team.</li> </ul> <p>Product owner:</p> <ul> <li>Prior to the sprint planning: performs some backlog refinement to ensure that each story that they want to propose for the new sprint (*)</li> <li>Is in the correct position in the backlog, by right priority order.</li> <li>Is attending the definition of ready- Do NOT pre-assign stories to the future sprint. This is the purpose of the sprint planning.</li> <li>During the meeting:</li> <li>Clarify team's questions and improve the story accordingly, if necessary.</li> <li>Describe to the team the stories that they propose for the sprint.</li> </ul> <p>All team members:</p> <ul> <li>Listen to the product owner story description.</li> <li>Ask questions to make sure everyone understands each story properly.</li> <li>Estimate the effort for each backlog item, as a team.</li> <li>Split each story into tasks.</li> <li>(Optional) self assign first task to team members.</li> </ul> <p>(*) some teams find useful to define a Definition of ready that describes the list of things that needs to be done in each story before the product owner can propose it for a sprint. The list proposed here is the classic minimal definition of ready.</p>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning.html#impact","title":"Impact","text":"<p>Sprint planning key benefits:</p> <ul> <li>Everyone participates, the entire team is aware of the scope of the sprint.</li> <li>The team has an agreement on the goal of the sprint.</li> <li>Each team member takes responsibility in the sprint scope by participating in the story's discovery, prioritization and estimation.</li> <li>Creates a channel to communicate, discover and discuss dependencies.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning.html#measures","title":"Measures","text":"<ul> <li>How many stories needed more work before being presented (and were rejected because they were not clear enough)?</li> <li>How realistic was the estimation of effort?</li> <li>Team satisfaction (can be assessed during the retrospective): does everyone in the team feel included in sprint planning?</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning.html#facilitation-guidance","title":"Facilitation Guidance","text":"<p>Prior to the meeting:</p> <ul> <li>Set sprint goal.</li> <li>Make sure the backlog is prioritized.</li> <li>Make sure each story that is a candidate for next sprint is ready.</li> </ul> <p>During the meeting:</p> <ul> <li>Confirm team capacity. This should be done using the average velocity (number of points achieved per sprint) and removing the project vacations/holidays/off days. If it helps, you can get the daily average velocity, divide by the number of team members and multiply by number of off days.</li> <li>Timebox (for instance: half of the meeting for story selection, half of the meeting for task splitting).</li> <li>Agree on how much capacity needs to be \"saved\" for bug fixing (might depend on the sprint).</li> <li>Ensure everyone understands each story that is selected for the sprint.</li> <li>Ensure everyone participates in story effort estimation.</li> </ul> <p>Other considerations:</p> <ul> <li>Take into account off days (vacations, national holidays, unavailability).</li> <li>When the backlog reaches a size that makes it difficult to manage by one team, you might want to split into different work streams. This might require thinking about scrum of scrums and all related ceremonies.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html","title":"Stand-ups","text":""},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#overview","title":"Overview","text":"<p>The stand-up is a time-boxed ceremony that is held each day of the sprint. In this ceremony, each contributor in the Development Team will answer three simple project questions and an optional social question. This will repeat until each contributor has answered the following questions.</p> <ol> <li>What did you work on yesterday that contributes to meet the sprint goal?</li> <li>What are you working on today that will contribute to meet the sprint goal?</li> <li>Do you have any impediments/blockers or need any help? (defer discussion / resolution to \"the parking lot\", described below)</li> <li>An optional social question, e.g. \"would you rather see the past or the future?\"</li> </ol> <p>During the stand-up, additional discussions may arise. Make sure that someone adds them to the parking lot for after meeting discussion. After that point, the stand-up is concluded.</p> <p>As a good practice, the items in the parking lot take place right after the stand-up. However, you can opt to discuss the parking lot items at another time before the next stand-up. The participation in the parking lot discussion is optional for all members except those explicitly needed for discussion of the issues raised.</p> <p>The term parking lot refers to a bucket of comments, concerns, or questions that will be discussed and/or addressed at a later point with potentially fewer contributors. This is part of a strategy to avoid letting the discussion in a meeting shift to a subject that is not aligned with the meeting goals and/or decisions.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#goals","title":"Goals","text":"<ol> <li>Bring awareness of the progress done towards the sprint goal, and the sprint backlog.</li> <li>Surface any impediments to one or more team members' contributions.</li> <li>Maintain contact between remote team members to reduce social barriers to collaboration.</li> </ol>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#participation","title":"Participation","text":"<p>The entire team should attend the stand-up. Anyone that worked on a task towards the sprint work should answer the three questions. It would be up to the team to decide if they would like updates from members that are not directly working against sprint task work (i.e. Product Owners and Program Managers).</p> <ul> <li>ScrumMaster (Required)</li> <li>Product Owner (Optional)</li> <li>Program Manager (Required)</li> <li>Dev Lead + Contributors (Required)</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#impact","title":"Impact","text":"<p>Team members get a clear understanding of what development tasks are going on within the team which helps with collaboration. It also provides a time to address any challenges or blockers that may be stopping specific tasks from being completed, therefore helping with velocity.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#measures","title":"Measures","text":"<p>Both stand-up length and time to start are important as the stand-up has to be seen as a reliable and efficient meeting that facilitates communication of information versus unnecessary overhead.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#stand-up-length","title":"Stand-up Length","text":"<p>While the length can depend on the team size, if everyone is sticking to one line answers to the key questions, it should be fairly easy to conclude within 5-10 minutes.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#example-team-size-8","title":"Example (team size == ~8)","text":"<ul> <li>1-5 min = Excellent</li> <li>5-10 min = Great</li> <li>10-15 min = Good</li> <li>15+ min = Needs Improvement</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#time-to-start","title":"Time to Start","text":"<p>How long after the scheduled start time did contributors begin providing updates?</p> <ul> <li>0-1 min = Excellent</li> <li>1-3 min = Great</li> <li>3-5 min = Good</li> <li>5+ min = Needs Improvement</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#new-tasks-created-after-stand-up","title":"New Tasks Created After Stand-up","text":"<p>How many tasks are being generated after the stand-up that didn't exist before? This can indicate how much unplanned work is being done. If creating new tasks after stand-up becomes routine (especially for the same story), this could indicate the story is at higher risk of not being completed. It could also indicate a shift in focus to an unplanned objective.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#facilitation-guidance","title":"Facilitation Guidance","text":"<p>The ScrumMaster should facilitate the stand-up meeting.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#speak-to-tasks","title":"Speak to Tasks","text":"<p>When answering what was worked on and what will be worked on, refer directly to tasks. This has two benefits:</p> <ol> <li>The answer will naturally be short (e.g. \"I finished task 114 yesterday; which was to update the build of the api container image. I will be starting on task 115 today; which is to update the release pipeline for the same container image.\").</li> <li>Unplanned work will be easily identifiable. If the person is unable to refer to a task, that typically indicates they are working on something unplanned or out of scope for the sprint (e.g. Yesterday, I was attempting to optimize some unit tests from last sprint to run faster).</li> </ol> <p>If a contributor is not working on an existing sprint task they need to either create a new task under an existing sprint story to reflect that work, or defer that work until it's scheduled for a later sprint.</p> <p>If a contributor provides an update without referring to a task, ask the contributor which task.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#parking-lot-discussion-items","title":"Parking Lot Discussion Items","text":"<p>As contributors are answering the questions, if another contributor has a question or issue to share, they should reserve until after all contributors have finished answering. Once each member has answered all questions, the Process Lead should open up the floor to anyone who may have an open question or unresolved issue to share. This portion of the ceremony is often referred to as the \"Parking Lot\".</p> <p>Parking lot discussions are optional for participants.</p> <p>Ensure discussion leaders call out necessary parties for their discussion points upfront, allowing those not needed to leave the meeting.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#social-question","title":"Social question","text":"<p>Teams are frequently geographically distributed and include members who have not worked on projects together previously. Social interactions facilitate the development of trust between team members and lower the barriers to collaboration. A social question-of-the-day that has a one-sentence answer contributes to trust development over the course of many stand-ups, with a minimal additional time commitment. The answer to the social question should be brief and follow the project questions answer. The facilitator may choose the social question or take a suggestion from the room. Description of what makes a good question, and a list of starter questions are available within the social question page.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#start-on-time","title":"Start On Time","text":"<p>Make a best effort to begin answering the questions as close to the scheduled start time as possible. Try not to waste time upfront on chit-chat or waiting on all team members to join. This can extend the meeting time significantly. Starting immediately will help ensure stand-ups remain effective and useful over time.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#same-time-every-weekday","title":"Same Time Every weekday","text":"<p>Stand-up should be held at the same time each weekday. The meeting time should be mutually agreed-upon by the contributors, and should take into consideration time zones, working schedules, and other factors so that every team member can reasonably participate.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#multiple-time-zones","title":"Multiple Time zones","text":"<p>For team members distributed across time zones, consider scheduling the stand-up at the best convenient time within the time zone that has the most team members.</p> <p>Tip: Whenever you have a large difference between the time zones, consider scheduling the stand up in such a way it does not occur at an inconvenient time for the same time zone every day.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#contributors-unable-to-attend-async-updates","title":"Contributors Unable to Attend (async updates)","text":"<p>If a contributor knows that they will have to miss the stand-up, ask them to provide their answers to the questions in written form before the stand-up. They could provide these over a shared Teams channel or email to the team. The Process Lead can then read the answers during the stand-up. Reading the update aloud during the stand-up will ensure the answers are communicated to the team.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#remote-located-team-members","title":"Remote Located Team Members","text":"<p>If any team member is working remotely, plan to run stand-ups through conference calls. Ask the team members to keep the camera on as much as possible so that they can see each other when speaking against the questions.</p> <p>Tip: In order to keep the remote stand-up as efficient, in a good pace and with the collective sense as it is in a physically located stand-up, you can agree on applying a \"pick the next one approach\" in which the current contributor to speak picks the next in a loop until everyone with contributions had answered the questions.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups.html#resources","title":"Resources","text":"<ul> <li>Daily Scrum - Tips &amp; Tactics</li> <li>Atlassian guide to Stand-ups</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements.html","title":"Team Agreements","text":""},{"location":"best-practices/continuous-planning/agile-development/team-agreements.html#overview","title":"Overview","text":"<p>Team agreements help clarify expectations for all team members, whether they are expectations around how the team works together (Working Agreements) or how to judge if a story is complete (Definition of Done).</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements.html#sections-within-team-agreements","title":"Sections within Team Agreements","text":"<ul> <li>Definition of Done</li> <li>Definition of Ready</li> <li>Working Agreements</li> <li>Team Manifesto</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/estimation.html","title":"Estimation","text":"<p>When a team adopts agile, as the team works together, the process of estimating new work becomes more effective. Over time, they get a sense for how their team approaches the stories, and the effort that will be required to complete each story. With a few successful sprints completed, the team can start to see patterns of success and where the team has had failures. The team can start to look at their velocity against their estimates and begin to predict with greater accuracy what effort will be needed to complete the next story.</p> <p>If the makeup of the team is regularly changing, the process of estimation becomes challenging as the patterns that drive the estimation process also change. Initially, it will take three to five or more sprints to find a good rhythm to the team estimations. When the team changes to a new project or a team is reorganized to join with another team, the estimation model is essentially reset, and a new baseline must be formed.</p> <p>Before beginning the estimation process, the team should be clear what the goal of the user story is. This means that the work to be done should be clear, and the acceptance criteria is agreed on by the team members that are doing estimation. If the story is not ready to be handed off to a developer to start working on, it is not ready for estimation.</p>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/estimation.html#sizing","title":"Sizing","text":"<p>There are many ways to size stories. This is usually where teams get hung up on finding the balance between sizing that feel \"willy-nilly\" and accurately estimating the hours to complete the work. It is helpful to remember that this exercise is to accurately determine what work can be completed in the sprint...not a precise time allocation for the work to be complete.</p> <p>In the beginning, to determine sizing, the team will generally pick two or three stories that reflect a known amount of work of varying size. Usually, a simple, an average, and a complex story will work best. A simple story is one that can be completed by a single developer in a time that is relatively short compared to the length of the sprint. For example, if your team is running weeklong sprints, a simple story might be able to be completed in a day, an average story might be two days, and a complex story might take the entire sprint. The key is that there is consensus on the team for what the relative sizes reflect. After a baseline is agreed upon, the planning team will estimate each story that is ready for development and will be given a relative sizing based on the sizing agreed to by the team. Examples of estimating approaches are given below.</p> <p>As the team works together, they will gain more experience about how the team estimates the size stories. There will be more stories to help gauge the relative size of the stories being estimated. This will tend to make the estimates more accurate over time. As the team works together they will have better data to know how much work can be committed to for the next sprint.</p>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/estimation.html#planning-poker","title":"Planning Poker","text":"<p>Possibly the most popular approach to sizing is called Planning Poker. This approach assigns sizing based on the fibonacci numbers 1, 2, 3, 5, 8, 13 and 21. This can be done with something as low tech as holding up fingers to online tools that allow teams to remotely vote. Co-located teams can even choose to purchase playing cards that reflect the fibonacci numbers and distribute the cards during the estimating time.</p> <p>Online tools like Azure DevOps have extensions that can be installed that help remote team members to do estimating effectively. One example of this is the \"Estimate\" extension by Microsoft DevLabs that ties planning poker directly to the stories and will update \"Story Points\" field in the user story.</p> <p>Depending on how granular the team wants the numbers, the team should focus not on time but on relative work to be done. If you find that your team is saying \"this should take one day, so it is an 8\" you will soon lose the value of the estimation exercise. Rather, you should think \"this story is more difficult than that story\". So when the team is estimating a story, the team can ask \"How difficult is this story compared to the work we did last sprint that was a 5?\" Less difficult maybe it's a 2 or 3. More difficult it's an 8 or three times as difficult...13. When you go beyond 21 you may want to ask if the story can be broken down into smaller chunks.</p>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/estimation.html#t-shirt-sizes","title":"T-Shirt Sizes","text":"<p>When using numbers, teams start to over-analyze what the points should be, or they try to begin to correlate points to hours on the clock. Teams start to pad their estimates so they can justify their work with their time sheet. When you see this start to happen, it may be time to remind the team this is about relative sizing not about hours to complete the work.</p> <p>One way to do this is to switch to T-Shirt sizing. With this approach you have extra small, small, medium, large, extra-large, and double extra-large. When you remove the correlation to numbers, the team remembers that their goal is only to determine how difficult the work is before committing to the work to be done. It also gives the product owner visibility that what was perceived as a simple task may be more costly and thus less desirable than a couple of other features of a smaller size.</p> <p>Another benefit of using a less granular approach is that the team won't spend so much time trying to come to agreement on the precise measurement of the work. Decisions on medium or large are easier than deciding a work item is 5 or 8 points. That said this will also put the agile team leader in the position of converting sizes into numeric values for the purpose of charting and tracking velocity over time.</p>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/estimation.html#estimation-in-planning","title":"Estimation in Planning","text":"<p>As the team continues the exercise of estimating in the planning meeting, it should be viewed as an exercise in relative sizing of the work. Comparing the expected work to work that has already been done is helpful for the team to understand how they view the complexity of the work.</p> <p>Estimation can be done at any time with the consensus of the team and doesn't always have to be done during the sprint planning. It may be helpful to the product owner to understand the relative effort for the stories in order to prioritize the work. If the Product Owners sees that one feature that they highly value, might not be as valuable when they see that three other features that get pushed out because of that one story's complexity.</p> <p>In the planning meeting, the team looks at the prioritized items that are ready for development. The team should work through the items in priority making sure that if there is already an estimate the team still agrees with the estimate. Finally, the team should estimate how many points the team can deliver in the sprint and then make a commitment for the sprint. During the sprint, the team takes the highest priority items off of the backlog and works on them to completion. At the end of the sprint, the team reports the number of story points completed during the sprint. The agile coordinator should track this information so that over time, the team can work to get better at estimating the points that each story requires as well as how many points can be delivered in a given sprint.</p>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/estimation.html#relative-mass","title":"Relative Mass","text":"<p>If there are a lot of stories to be estimated, the team can be overwhelmed doing this all at once, and the process can be long and unproductive. However, because the stories are estimated relative to each other, it may be easier to do a relative mass estimation.</p> <p>For each story, either a card or a sticky note is created. The first card is read and then placed in the center of the table or board. Then, as each card is read, the team asks \"Is this easier or harder that that card?\", and it is placed in either lower or higher position than the story that already exist on the table. This continues with each card being placed in a line of difficulty from easiest to most difficult until all stories are placed. Finally, the team then finds the \"breaks\" that represent their relative sizing model and record the estimation for each of the cards in that grouping.</p> <p>When working with remote teams this can be done with a shared story board, or a list where the work items can be placed in an ordered ranking. Again, starting with the top story, each subsequent story is placed higher or lower in the list based on the relative mass of the story.</p>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/sprint-structure.html","title":"Structure of a Sprint","text":"<p>The purpose of this document is to:</p> <ul> <li>Organize content in the playbook for quick reference and discoverability</li> <li>Provide content in a logical structure which reflects the engineering process</li> <li>Extensible hierarchy to allow teams to share deep subject-matter expertise</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/sprint-structure.html#the-first-week-of-a-project","title":"The first week of a Project","text":""},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/sprint-structure.html#before-starting-the-project","title":"Before starting the project","text":"<p>Discuss and start writing a team agreement and update these documents with any process decisions made throughout the project.</p> <ul> <li> <p>Team Agreement</p> </li> <li> <p>Working Agreement</p> </li> <li>Definition of Ready</li> <li>Definition of Done</li> <li> <p>Estimation</p> </li> <li> <p>XXX Set up the repository/repositories</p> </li> <li>Decide on repository structure/s</li> <li>XXX Add the following files README, LICENSE, CONTRIBUTING, .gitignore, etc.</li> <li>Build a product backlog</li> <li>Set up a project in your chosen project management tool (ex. Azure DevOps or JIRA)</li> <li>INVEST in good user stories and acceptance criteria</li> <li>XXX Non-Functional Requirements Guidance</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/sprint-structure.html#day-1-activities","title":"Day 1 Activities","text":"<ul> <li> <p>Plan the first sprint</p> </li> <li> <p>Agree on a sprint goal, and how to measure the sprint progress</p> </li> <li>Determine team capacity</li> <li>Assign user stories to the sprint and split user stories into tasks</li> <li> <p>Set up Work in Progress (WIP) limits</p> </li> <li> <p>XXX Decide on test frameworks and discuss test strategies</p> </li> <li>Discuss the purpose and goals of tests and how to measure test coverage</li> <li>Agree on how to separate unit tests from integration, load and smoke tests</li> <li>Design the first test cases</li> <li>XXX Decide on branch naming</li> <li>XXX Discuss security needs and verify that secrets are kept out of source control</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/sprint-structure.html#day-2-activities","title":"Day 2 Activities","text":"<ul> <li>XXX Set up Source Control</li> <li>XXX Agree on best practices for commits</li> <li>XXX Set up basic Continuous Integration with linters and automated tests</li> <li>Set up meetings for daily stand-ups and decide on a Process Lead</li> <li>Discuss purpose, goals, participants and facilitation guidance</li> <li>Discuss timing, and how to run an efficient stand-up</li> <li>If the project has sub-teams, set up a Scrum of Scrums</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/sprint-structure.html#day-3","title":"Day 3","text":"<ul> <li>XXX Agree on code style and on how to assign Pull Requests</li> <li>XXX Set up Build Validation for Pull Requests (2 reviewers, linters, automated tests) and agree on definition of done</li> <li>XXX Agree on a Code Merging strategy and update the CONTRIBUTING page.</li> <li>XXX Agree on logging and observability frameworks and strategies</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/sprint-structure.html#day-4","title":"Day 4","text":"<ul> <li>Set up continuous delivery</li> <li>Determine what environments are appropriate for this solution</li> <li>For each environment discuss purpose, when deployment should trigger, pre-deployment approvers, sing-off for promotion.</li> <li>XXX Decide on a versioning strategy</li> <li>Agree on how to design a feature and conduct a design review</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/sprint-planning/sprint-structure.html#day-5","title":"Day 5","text":"<ul> <li>Conduct a sprint demo</li> <li>Conduct a retrospective</li> <li>Determine required participants, how to capture input (tools) and outcome</li> <li>Set a timeline, and discuss facilitation, meeting structure etc.</li> <li>Refine the backlog</li> <li>Determine required participants</li> <li>Update the definition of ready</li> <li>Update estimates, and the Estimation document</li> <li>XXX Submit Engineering Feedback for issues encountered.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups/social-question.html","title":"Social Question","text":"<p>The social question of the day is an optional short question to follow the three project questions in the daily stand-up. It develops team cohesion and interpersonal trust over the course of an engagement by facilitating the sharing of personal preferences, lifestyle, or other context.</p> <p>The social question should be chosen before the stand-up. The facilitator should select the question either independently or from the team's asynchronous suggestions. This minimizes delays at the start of the stand-up.</p> <p>Tip: having the stand-up facilitator role rotate each sprint lets the facilitator choose the social question independently without burdening any one team member.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups/social-question.html#properties-of-a-good-question","title":"Properties of a good question","text":"<p>A good question has a brief answer with small optional elaboration. A yes or no answer doesn't tell you very much about someone, while knowing that their favorite fruit is a durian is informative.</p> <p>Good questions are low in consequence but allow controversy. Watching someone strongly exclaim that salmon and lox on cinnamon-raisin is the best bagel order is endearing. As a corollary, a good question is one someone is likely to be passionate about. You know a little more about a team member's personality if their eyes light up when describing their favorite karaoke song.</p>"},{"location":"best-practices/continuous-planning/agile-development/stand-ups/social-question.html#starter-list-of-questions","title":"Starter list of questions","text":"<p>Potentially good questions include:</p> <ul> <li>What's your Starbucks order?</li> <li>What's your favorite operating system?</li> <li>What's your favorite version of Windows?</li> <li>What's your favorite plant, houseplant or otherwise?</li> <li>What's your favorite fruit?</li> <li>What's your favorite fast food?</li> <li>What's your favorite noodle?</li> <li>What's your favorite text editor?</li> <li>Mountains or beach?</li> <li>DC or Marvel?</li> <li>Coffee with one person from history: who?</li> <li>What's your silliest online purchase?</li> <li>What's your alternate career?</li> <li>What's the best bagel topping?</li> <li>What's your guilty TV pleasure?</li> <li>What's your go-to karaoke song?</li> <li>Would you rather see the past or the future?</li> <li>Would you rather be able to teleport or to fly?</li> <li>Would you rather live underwater or in space for a year?</li> <li>What's your favorite phone app?</li> <li>What's your favorite fish, to eat or otherwise?</li> <li>What was your best costume?</li> <li>Who is someone you admire (from history, from your personal life, etc.)? Give one reason why.</li> <li>What's the best compliment you've ever received?</li> <li>What's your favorite or most used emoji right now?</li> <li>What was your biggest DIY project?</li> <li>What's a spice that you use on everything?</li> <li>What's your top Spotify (or just your favorite) genre/artist for this year?</li> <li>What was your first computer?</li> <li>What's your favorite kind of taco?</li> <li>What's your favorite decade?</li> <li>What's the best way to eat potatoes?</li> <li>What was your best vacation (stay-cations acceptable)?</li> <li>Favorite cartoon?</li> <li>Pick someone in your family and tell us something awesome about them.</li> <li>What was your longest road trip?</li> <li>What thing do you remember learning when you were young that is taught differently now?</li> <li>What was your favorite toy as a child?</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/definition-of-done.html","title":"Definition of Done","text":"<p>To close a user story, a sprint, or a milestone it is important to verify that the tasks are complete.</p> <p>The development team should decide together what their Definition of Done is and document this in the project. Below are some examples of checks to verify that the user story, sprint, task is completed.</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/definition-of-done.html#featureuser-story","title":"Feature/User Story","text":"<ul> <li>Acceptance criteria are met</li> <li>Refactoring is complete</li> <li>Code builds with no error</li> <li>Unit tests are written and pass</li> <li>Existing Unit Tests pass</li> <li>Sufficient diagnostics/telemetry are logged</li> <li>Code review is complete</li> <li>UX review is complete (if applicable)</li> <li>Documentation is updated</li> <li>The feature is merged into the develop branch</li> <li>The feature is signed off by the product owner</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/definition-of-done.html#sprint-goal","title":"Sprint Goal","text":"<ul> <li>Definition of Done for all user stories included in the sprint are met</li> <li>Product backlog is updated</li> <li>Functional and Integration tests pass</li> <li>Performance tests pass</li> <li>End 2 End tests pass</li> <li>All bugs are fixed</li> <li>The sprint is signed off from developers, software architects, project manager, product owner etc.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/definition-of-done.html#releasemilestone","title":"Release/Milestone","text":"<ul> <li>Code Complete (goals of sprints are met)</li> <li>Release is marked as ready for production deployment by product owner</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/definition-of-ready.html","title":"Definition of Ready","text":"<p>When the development team picks a user story from the top of the backlog, the user story needs to have enough detail to estimate the work needed to complete the story within the sprint. If it has enough detail to estimate, it is Ready to be developed.</p> <p>If a user story is not Ready in the beginning of the Sprint it increases the chance that the story will not be done at the end of this sprint.</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/definition-of-ready.html#what-it-is","title":"What it is","text":"<p>Definition of Ready is the agreement made by the scrum team around how complete a user story should be in order to be selected as candidate for estimation in the sprint planning. These can be codified as a checklist in user stories.</p> <p>It can also be understood as a checklist that helps the Product Owner to ensure that the user story they wrote contains all the necessary details for the scrum team to understand the work to be done.</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/definition-of-ready.html#examples-of-ready-checklist-items","title":"Examples of ready checklist items","text":"<ul> <li>Does the description have the details including any input values required to implement the user story?</li> <li>Does the user story have clear and complete acceptance criteria?</li> <li>Does the user story address the business need?</li> <li>Can we measure the acceptance criteria?</li> <li>Is the user story small enough to be implemented in a short amount of time, but large enough to provide value to the customer?</li> <li>Is the user story blocked? For example, does it depend on any of the following:</li> <li>The completion of unfinished work</li> <li>A deliverable provided by another team (code artifact, data, etc...)</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/definition-of-ready.html#who-writes-it","title":"Who writes it","text":"<p>The ready checklist can be written by a Product Owner in agreement with the development team and the ScrumMaster.</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/definition-of-ready.html#when-should-a-definition-of-ready-be-updated","title":"When should a Definition of Ready be updated","text":"<p>Update or change the definition of ready anytime the scrum team observes that there are missing information in the user stories that recurrently impacts the planning.</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/definition-of-ready.html#what-should-be-avoided","title":"What should be avoided","text":"<p>The ready checklist should contain items that apply broadly. Don't include items or details that only apply to one or two user stories. This may become an overhead when writing the user stories.</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/definition-of-ready.html#how-to-get-stories-ready","title":"How to get stories ready","text":"<p>In the case that the highest priority work is not yet ready, it still may be possible to make forward progress. Here are some strategies that may help:</p> <ul> <li>Backlog refinement sessions are a good time to validate that high priority user stories are verified to have a clear description, acceptance criteria and demonstrable business value. It is also a good time to breakdown large stories will likely not be completable in a single sprint.</li> <li>Prioritization sessions are a good time to prioritize user stories that unblock other blocked high priority work.</li> <li>Blocked user stories can often be broken down in a way that unblocks a portion of the original stories scope. This is a good way to make forward progress even when some work is blocked.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/team-charter.html","title":"Team Charter","text":""},{"location":"best-practices/continuous-planning/agile-development/team-agreements/team-charter.html#overview","title":"Overview","text":"<p>A team charter is a light-weight one page agile document among team members which summarizes the basic principles and values of the team and aiming to provide a consensus about technical expectations from each team member in order to deliver high quality output at the end of each engagement.</p> <p>It aims to reduce the time on setting the right expectations without arranging longer \"team document reading\" meetings and provide a consensus among team members to answer the question - \"How does the new team develop the software?\" - by covering all engineering fundamentals and excellence topics such as release process, clean coding, testing.</p> <p>Another main goal of writing the charter is to start a conversation during the \"charter building session\" to detect any differences of opinion around how the team should work.</p> <p>It also serves in the same way when a new team member joins to the team. New joiners can quickly get up to speed on the agreed standards.</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/team-charter.html#how-to-build-a-team-charter","title":"How to Build a Team Charter","text":"<p>It can be said that the best time to start building it is at the very early phase of the engagement when teams meet with each other for swarming or during the preparation phase.</p> <p>It is recommended to keep team charter as simple as possible, so preferably, one-page simple document which doesn't include any references or links is a nice format for it. If there is a need for providing knowledge on certain topics, the way to do is delivering brown-bag sessions, technical katas, team practices, documentations and others later on.</p> <p>A few important points about the team charter</p> <ul> <li>The team charter is built by the development team itself</li> <li>It should cover all required technical engineering points for the excellence as well as behavioral agility mindset items that the team finds relevant</li> <li>It aims to give a common understanding about the desired expertise, practices and/or mindset within the team</li> <li>Based on the needs of the team and retrospective results, it can be modified during the engagement.</li> </ul> <p>We aim for quality over quantity, and well-crafted software as well as to a comfortable/transparent environment where each team member can reach their highest potential.</p> <p>The difference between the team charter and other team documents is that it is used to give a short summary of expectations around the technical way of working and supported mindset in the team, before code-with sprints starts.</p> <p>Below, you can find some including, but not limited, topics many teams touch during engagements,</p> Topic What is it about ? Collective Ownership Does team own the code rather than individuals? What is the expectation? Respect Any preferred statement about it's a \"must-have\" team value Collaboration Any preferred statement about how does team want to collaborate ? Transparency A simple statement about it's a \"must-have\" team value and if preferred, how does this being provided by the team ? meetings, retrospective, feedback mechanisms etc. Crafts-person-ship Which tools such as Git, VS Code LiveShare, etc. are being used ? What is the definition of expected best usage of them? PR sizing What does team prefer in PRs ? Branching Team's branching strategy and standards Commit standards Preferred format in commit messages, rules and more Clean Code Does team follow clean code principles ? Pair/Mob Programming Will team apply pair/mob programming ? If yes, what programming styles are suitable for the team ? Release Process Principles around release process such as quality gates, reviewing process ...etc. Code Review Any rule for code reviewing such as min number of reviewers, team rules ...etc. Action Readiness How the backlog will be refined? How do we ensure clear Definition of Done and Acceptance Criteria ? TDD Will the team follow TDD ? Test Coverage Is there any expected number, percentage or measurement ? Dimensions in Testing Required tests for high quality software, eg : unit, integration, functional, performance, regression, acceptance Build process build for all? or not; The clear statement of where code and under what conditions code should work ? eg : OS, DevOps, tool dependency Bug fix The rules of bug fixing in the team ? eg: contact people, attaching PR to the issue etc. Technical debt How does team manage/follow it? Refactoring How does team manage/follow it? Agile Documentation Does team want to use diagrams and tables more rather than detailed KB articles ? Efficient Documentation When is it necessary ? Is it a prerequisite to complete tasks/PRs etc.? Definition of Fun How will we have fun for relaxing/enjoying the team spirit during the engagement?"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/team-charter.html#tools","title":"Tools","text":"<p>Generally team sessions are enough for building a charter and having a consensus around it, and if there is a need for improving it in a structured way, Building a Team charter or any retrospective tool can be used.</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/team-charter.html#resources","title":"Resources","text":"<ul> <li>Building a Team Charter</li> <li>What is a Team Charter, and How Can It Keep Your Team on Track?</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/team-engagements.html","title":"Team Engagements","text":"<p>In every engagement or project, dynamics are different &amp; so are the team requirements. Based on transfer learning among teams, we aim to build right \"code-with\" environments in every team.</p> <p>This documentation gives a high-level template with some suggestions by aiming to accelerate team swarming phase to achieve a high speed agility, however it has no intention to provide a list of \"must-do\" items.</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/team-engagements.html#identification","title":"Identification","text":"<p>As it's stated in Tuckman's team phases, traditional team development has several stages. However those phases can be extremely fast or sometimes mismatched in teams due to external factors.</p> <p>In order to minimize the risk and set the expectations on the right way for all parties, an identification phase is important to understand each other. Some potential steps in this phase may be as following (not limited):</p> <ul> <li> <p>Working agreement</p> </li> <li> <p>Identification of styles/preferences in communication, sharing, learning, decision making of each team member</p> </li> <li> <p>Talking about necessity of pair programming</p> </li> <li>Decisions on backlog management &amp; refinement meetings, weekly design sessions, social time sessions...etc.</li> <li> <p>Sync/Async communication methods, work hours/flexible times</p> </li> <li> <p>Decisions and identifications of charts that will be helpful to provide transparent and true information to everyone</p> </li> <li> <p>Identification of \"Software Crafts-person-ship\" areas which means the tools and methods will be widely used during the engagement and taking the required actions on team up-skilling side if necessary.</p> </li> <li> <p>Git, VSCode, Azure DevOps, &amp; any other necessary development tools &amp; libraries.</p> </li> <li> <p>If up-skilling on certain topic(s) is needed, identifying the areas and arranging 'learning tasks' for increasing the team knowledge on the regarding topic(s).</p> </li> <li> <p>Identification of communication channels, feedback loops and recurrent team call slots out of regular sprint meetings</p> </li> <li> <p>Introduction to team charter and planning the technical delivery by aiming to keep technical debt risk minimum.</p> </li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/team-engagements.html#following-the-plan-and-agile-debugging","title":"Following the Plan and Agile Debugging","text":"<p>Identification phase accelerates the process of building a safe environment for every individual in the team, later on team has the required assets to follow the plan. And it is team's itself responsibility (engineers,PO,Process Lead) to debug their Agility level.</p> <p>In every team stabilization takes time and pro-active agile debugging is the best accelerator to decrease the distraction away from sprint/engagement goal. The Team is also responsible to keep the plan up-to-date based on team changes/needs and debugging results.</p> <p>Just as an example, agility debugging activities may include:</p> <ul> <li> <p>Dashboards related with \"Goal\" such as burndown/burnout, Item/PR Aging, Mood Chart ..etc. are accessible to the team and team is always up-to-date</p> </li> <li> <p>Backlog refinement meetings</p> </li> <li> <p>Size of stories (Too big? Too small?)</p> </li> <li>Are \"User Stories\" and \"Tasks\" clear ?</li> <li>Are Acceptance Criteria enough and right?</li> <li> <p>Is everyone ready-to-go after taking the User Story/Task?</p> </li> <li> <p>Running efficient retrospectives</p> </li> <li> <p>Is the Sprint Goal clear in every iteration ?</p> </li> <li> <p>Is the estimation process in the team improving over time or does it meet the delivery/workload prediction?</p> </li> </ul> <p>Kindly check scrum values to have a better understanding to improve team commitment.</p> <p>Following that, above suggestions aim to remove agile/team dis-functionalities and provide a broader team understanding, potential time savings and full transparency.</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/team-engagements.html#resources","title":"Resources","text":"<ul> <li>Tuckman's stages of group development</li> <li>Scrum Values</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/working-agreements.html","title":"Working Agreements","text":""},{"location":"best-practices/continuous-planning/agile-development/team-agreements/working-agreements.html#overview","title":"Overview","text":"<p>A working agreement is a document, or a set of documents that describe how we work together as a team and what our expectations and principles are.</p> <p>The working agreement created by the team at the beginning of the project, and is stored in the repository so that it is readily available for everyone working on the project.</p> <p>The following are examples of sections and points that can be part of a working agreement but each team should compose their own, and adjust times, communication channels, branch naming policies etc. to fit their team needs.</p>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/working-agreements.html#general","title":"General","text":"<ul> <li>We work as one team towards a common goal and clear scope</li> <li>We make sure everyone's voice is heard, listened to</li> <li>We show all team members equal respect</li> <li>We work as a team to have common expectations for technical delivery that are documented in a Team Charter.</li> <li>We make sure to spread our expertise and skills in the team, so no single person is relied on for one skill</li> <li>All times below are listed in BST (British Summer Time)</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/working-agreements.html#communication","title":"Communication","text":"<ul> <li>We communicate all information relevant to the team through the Project Teams channel</li> <li>We add all technical spikes, design reviews, and other technical documentation to the project repository through async design reviews in PRs</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/working-agreements.html#work-life-balance","title":"Work-life Balance","text":"<ul> <li>Our office hours, when we can expect to collaborate via Microsoft Teams, phone or face-to-face are Monday to Friday 10AM - 5PM</li> <li>We are not expected to answer emails past 6PM, on weekends or when we are on holidays or vacation.</li> <li>We work in different areas of the country and respect this, especially when setting up recurring meetings.</li> <li>We record meetings when possible, so that team members who could not attend live can listen later.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/working-agreements.html#quality-and-not-quantity","title":"Quality and not Quantity","text":"<ul> <li>We agree on a definition of done for our user story's and sprints and live by it.</li> <li>We follow engineering best practices like the Code With Engineering Playbook</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/working-agreements.html#scrum-rhythm","title":"Scrum Rhythm","text":"Activity When Duration Who Accountable Goal Project Standup Tue-Fri 10AM 15 min Everyone ScrumMaster What has been accomplished, next steps, blockers Sprint Demo Monday 9AM 1 hour Everyone Dev Lead Present work done and sign off on user story completion Sprint Retro Monday 10AM 1 hour Everyone Process Lead Dev Teams shares learnings and what can be improved Sprint Planning Monday 11AM 1 hour Everyone PO Size and plan user stories for the sprint Task Creation After Sprint Planning - Dev Team Dev Lead Create tasks to clarify and determine velocity Backlog refinement Wednesday 2PM 1 hour Dev Lead, PO PO Prepare for next sprint and ensure that stories are ready for next sprint."},{"location":"best-practices/continuous-planning/agile-development/team-agreements/working-agreements.html#process-lead","title":"Process Lead","text":"<p>The Process Lead is responsible for leading any scrum or agile practices to enable the project to move forward.</p> <ul> <li>Facilitate standup meetings and hold team accountable for attendance and participation.</li> <li>Keep the meeting moving as described in the Project Standup page.</li> <li>Make sure all action items are documented and ensure each has an owner and a due date and tracks the open issues.</li> <li>Notes as needed after planning / stand-ups.</li> <li>Make sure that items are moved to the parking lot and ensure follow-up afterwards.</li> <li>Maintain a location showing team\u2019s work and status and removing impediments that are blocking the team.</li> <li>Hold the team accountable for results in a supportive fashion.</li> <li>Make sure that project and program documentation are up-to-date.</li> <li>Guarantee the tracking/following up on action items from retrospectives (iteration and release planning) and from daily standup meetings.</li> <li>Facilitate the sprint retrospective.</li> <li>Coach Product Owner and the team in the process, as needed.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/working-agreements.html#backlog-management","title":"Backlog Management","text":"<ul> <li>We work together on a Definition of Ready and all user stories assigned to a sprint need to follow this</li> <li>We communicate what we are working on through the board</li> <li>We assign ourselves a task when we are ready to work on it (not before) and move it to active</li> <li>We capture any work we do related to the project in a user story/task</li> <li>We close our tasks/user stories only when they are done (as described in the Definition of Done)</li> <li>We work with the PO if we want to add a new user story to the sprint</li> <li>If we add new tasks to the board, we make sure it matches the acceptance criteria of the user story (to avoid scope creep).   If it doesn't match the acceptance criteria we should discuss with the PO to see if we need a new user story for the task or if we should adjust the acceptance criteria.</li> </ul>"},{"location":"best-practices/continuous-planning/agile-development/team-agreements/working-agreements.html#code-management","title":"Code Management","text":"<ul> <li>We follow the GitOps naming convention for branches and identify the task number e.g. <code>feature/123-add-working-agreement</code></li> <li>We merge all code into main branches through PRs</li> <li>All PRs are reviewed by at least two engineers</li> <li>We always review existing PRs before starting work on a new task</li> <li>We look through open PRs at the end of stand-up to make sure all PRs have reviewers.</li> <li>We treat documentation as code and apply the same standards to markdown as code</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns.html","title":"Design Patterns","text":"<p>The design patterns section recommends patterns of software and architecture design. This section provides a curated list of commonly used patterns from trusted sources. Rather than duplicate or replace the cited sources, this section aims to compliment them with suggestions, guidance, and learnings based on firsthand experiences.</p>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns.html#subsections","title":"Subsections","text":"<ul> <li>Data Heavy Design Guidance</li> <li>Object Oriented Design Reference</li> <li>Distributed System Design Reference</li> <li>REST API Design Guidance</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/non-functional-requirements.html","title":"Non-Functional Requirements","text":""},{"location":"best-practices/continuous-planning/design-reviews/non-functional-requirements.html#overview","title":"Overview","text":"<p>In software engineering projects, important characteristics of the system providing for necessary e.g., testability, reliability, scalability, observability, securability, manageability are best considered as first-class citizens in the requirements gathering process. By defining these non-functional requirements in detail early in the engagement, they can be properly evaluated when the cost of their impact on subsequent design decisions is comparatively low.</p> <p>To support the process of capturing a project's comprehensive non-functional requirements, this document offers a taxonomy for non-functional requirements and provides a framework for their identification, exploration, assignment of customer stakeholders, and eventual codification into formal engineering requirements as input to subsequent solution design.</p>"},{"location":"best-practices/continuous-planning/design-reviews/non-functional-requirements.html#investigation-process","title":"Investigation Process","text":"<ol> <li>Identify/brainstorm likely areas/topics requiring further investigation/definition</li> <li>Identify customer stakeholder(s) responsible for each identified area/topic</li> <li>Schedule debrief/requirements definition session(s) with each stakeholder</li> <li>as necessary to achieve sufficient understanding of the probable impact of each requirement to the project</li> <li>both current/initial milestone and long-term/road map</li> <li>Document requirements/dependencies identified and related design constraints</li> <li>Evaluate current/near-term planned milestone(s) through the lens of the identified requirements/constraints</li> <li>Categorize each requirement as affecting immediate/near-term milestone(s) or as applicable instead to the longer-term road map/subsequent milestones</li> <li>Adapt plans for current/near-term milestone(s) to accommodate immediate/near-term-categorized requirements</li> </ol>"},{"location":"best-practices/continuous-planning/design-reviews/non-functional-requirements.html#structure-of-outlineassignment-of-responsible-stakeholder","title":"Structure of Outline/Assignment of Responsible Stakeholder","text":"<p>In the following outline, assign name/email of 'responsible stakeholder' for each element after the appropriate level in the outline hierarchy. Assume inheritance model of responsibility assignment: stakeholder at any ancestor (parent) level is also responsible for descendent (child) elements unless overridden at the descendent level).</p> <p>e.g.,</p> <ul> <li>Parent1 [Susan/susan@domain.com]</li> <li>child1</li> <li>child2 [John/john@domain.com]<ul> <li>grandchild1</li> </ul> </li> <li>child3</li> <li>Parent2 [Sam/sam@domain.com]</li> <li>child1</li> <li>child2</li> </ul> <p>In the preceding example, 'Susan' is responsible for <code>Parent1</code> and all of its descendants except for <code>Parent1/child2</code> and <code>Parent1/child2/grandchild1</code> (for which 'John' is the stakeholder). 'Sam' is responsible for the entirety of <code>Parent2</code> and all of its descendants.</p> <p>This approach permits the retention of the logical hierarchy of elements themselves while also flexibly interleaving the 'stakeholder' identifications within the hierarchy of topics if/when they may need to diverge due to e.g., customer organizational nuances.</p>"},{"location":"best-practices/continuous-planning/design-reviews/non-functional-requirements.html#areas-of-investigation","title":"Areas of Investigation","text":""},{"location":"best-practices/continuous-planning/design-reviews/non-functional-requirements.html#enterprise-security","title":"Enterprise Security","text":"<ul> <li>Privacy</li> <li>PII</li> <li>HIPAA</li> <li>Encryption</li> <li>Data mobility</li> <li>at rest</li> <li>in motion</li> <li>in process/memory</li> <li>Key Management</li> <li>responsibility<ul> <li>platform</li> <li>BYOK</li> <li>CMK</li> </ul> </li> <li>INFOSEC regulations/standards</li> <li>e.g., FIPS-140-2<ul> <li>Level 2</li> <li>Level 3</li> </ul> </li> <li>ISO 27000 series</li> <li>NIST</li> <li>Other</li> <li>Network security</li> <li>Physical/Logical traffic boundaries/flow topology<ul> <li>Azure &lt;-- --&gt; On-prem</li> <li>Public &lt;-- --&gt; Azure</li> <li>VNET</li> <li>PIP</li> <li>Firewalls</li> <li>VPN</li> <li>ExpressRoute</li> <li>Topology</li> <li>Security</li> </ul> </li> <li>Certificates<ul> <li>Issuer</li> <li>CA</li> <li>Self-signed</li> <li>Rotation/expiry</li> </ul> </li> <li>INFOSEC Incident Response</li> <li>Process</li> <li>People</li> <li>Responsibilities</li> <li>Systems</li> <li>Legal/Regulatory/Compliance</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/non-functional-requirements.html#enterprise-authnauthz","title":"Enterprise AuthN/AuthZ","text":"<ul> <li>Users</li> <li>Services</li> <li>Authorities/directories</li> <li>Mechanisms/handshakes</li> <li>Active Directory</li> <li>SAML</li> <li>OAuth</li> <li>Other</li> <li>RBAC</li> <li>Perms inheritance model</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/non-functional-requirements.html#enterprise-monitoringoperations","title":"Enterprise Monitoring/Operations","text":"<ul> <li>Logging</li> <li>Operations</li> <li>Reporting</li> <li>Audit</li> <li>Monitoring</li> <li>Diagnostics/Alerts</li> <li>Operations</li> <li>HA/DR</li> <li>Redundancy</li> <li>Recovery/Mitigation</li> <li>Practices</li> <li>Principle of least-privilege</li> <li>Principle of separation-of-responsibilities</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/non-functional-requirements.html#other-standard-enterprise-technologiespractices","title":"Other standard Enterprise technologies/practices","text":"<ul> <li>Developer ecosystem</li> <li>Platform/OS<ul> <li>Hardened</li> <li>Approved base images</li> <li>Image repository</li> </ul> </li> <li>Tools, languages<ul> <li>Approval process</li> </ul> </li> <li>Code repositories<ul> <li>Secrets management patterns</li> <li>Env var</li> <li>Config file(s)</li> <li>Secrets retrieval API</li> </ul> </li> <li>Package manager source(s)<ul> <li>Private</li> <li>Public</li> <li>Approved/Trusted</li> </ul> </li> <li>CI/CD</li> <li>Artifact repositories</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/non-functional-requirements.html#production-ecosystem","title":"Production ecosystem","text":"<ul> <li>Platform/OS</li> <li>Hardened</li> <li>Approved base images</li> <li>Image repository</li> <li>Deployment longevity/volatility</li> <li>Automation</li> <li>Reproducibility<ul> <li>IaC</li> <li>Scripting</li> <li>Other</li> </ul> </li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/non-functional-requirements.html#other-areastopics-not-addressed-above-requires-customer-input-to-comprehensively-enumerate","title":"Other areas/topics not addressed above (requires customer input to comprehensively enumerate)","text":""},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html","title":"Data and DataOps Fundamentals","text":"<p>Most projects involve some type of data storage, data processing and data ops. For these projects, as with all projects, we follow the general guidelines laid out in other sections around security, testing, observability, CI/CD etc.</p>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html#goal","title":"Goal","text":"<p>The goal of this section is to briefly describe how to apply the fundamentals to data heavy projects or portions of the project.</p>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html#isolation","title":"Isolation","text":"<p>Please be cautious of which isolation levels you are using. Even with a database that offers serializability, it is possible that within a transaction or connection you are leveraging a lower isolation level than the database offers. In particular, read uncommitted (or eventual consistency), can have a lot of unpredictable side effects and introduce bugs that are difficult to reason about. Eventually consistent systems should be treated as a last resort for achieving your scalability requirements; batching, sharding, and caching are all recommended solutions to increase your scalability. If none of these options are tenable, consider evaluating the \"New SQL\" databases like CockroachDB or TiDB, before leveraging an option that relies on eventual consistency.</p> <p>There are other levels of isolation, outside the isolation levels mentioned in the link above. Some of these have nuances different from the 4 main levels, and can be difficult to compare. Snapshot Isolation, strict serializability, \"read your own writes\", monotonic reads, bounded staleness, causal consistency, and linearizability are all other terms you can look into to learn more on the subject.</p>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html#concurrency-control","title":"Concurrency Control","text":"<p>Your systems should (almost) always leverage some form of concurrency control, to ensure correctness amongst competing requests and to prevent data races. The 2 forms of concurrency control are pessimistic and optimistic.</p> <p>A pessimistic transaction involves a first request to \"lock the data\", and a second request to write the data. In between these requests, no other requests touching that data will succeed. See 2 Phase Locking (also often known as 2 Phase Commit) for more info.</p> <p>The (more) recommended approach is optimistic concurrency, where a user can read the object at a specific version, and update the object if and only if it hasn't changed. This is typically done via the Etag Header.</p> <p>A simple way to accomplish this on the database side is to increment a version number on each update. This can be done in a single executed statement as:</p> <p>WARNING: the below will not work when using an isolation level at or lower than read uncommitted (eventual consistency).</p> <pre><code>-- Please treat this as pseudo code, and adjust as necessary.\n\nUPDATE &lt;table_name&gt;\nSET field1 = value1, ..., fieldN = valueN, version = $new_version\nWHERE ID = $id AND version = $version\n</code></pre>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html#data-tiering-data-quality","title":"Data Tiering (Data Quality)","text":"<p>Develop a common understanding of the quality of your datasets so that everyone understands the quality of the data, and expected use cases and limitations.</p> <p>A common data quality model is <code>Bronze</code>, <code>Silver</code>, <code>Gold</code></p> <ul> <li>Bronze: This is a landing area for your raw datasets with none or minimal data transformations applied, and therefore are optimized for writes / ingestion. Treat these datasets as an immutable, append only store.</li> <li>Silver: These are cleansed, semi-processed datasets. These conform to a known schema and predefined data invariants and might have further data augmentation applied. These are typically used by data scientists.</li> <li>Gold: These are highly processed, highly read-optimized datasets primarily for consumption of business users. Typically, these are structured in your standard fact and dimension tables.</li> </ul> <p>Divide your data lake into three major areas containing your Bronze, Silver and Gold datasets.</p> <p>Note: Additional storage areas for malformed data, intermediate (sandbox) data, and libraries/packages/binaries are also useful when designing your storage organization.</p>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html#data-validation","title":"Data Validation","text":"<p>Validate data early in your pipeline</p> <ul> <li>Add data validation between the Bronze and Silver datasets. By validating early in your pipeline, you can ensure all datasets conform to a specific schema and known data invariants. This can also potentially prevent data pipeline failures in case of unexpected changes to the input data.</li> <li>Data that does not pass this validation stage can be rerouted to a record store dedicated for malformed data for diagnostic purposes.</li> <li>It may be tempting to add validation prior to landing in the Bronze area of your data lake. This is generally not recommended. Bronze datasets are there to ensure you have as close of a copy of the source system data. This can be used to replay the data pipeline for both testing (i.e. testing data validation logic) and data recovery purposes (i.e. data corruption is introduced due to a bug in the data transformation code and thus the pipeline needs to be replayed).</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html#idempotent-data-pipelines","title":"Idempotent Data Pipelines","text":"<p>Make your data pipelines re-playable and idempotent</p> <ul> <li>Silver and Gold datasets can get corrupted due to a number of reasons such as unintended bugs, unexpected input data changes, and more. By making data pipelines re-playable and idempotent, you can recover from this state through deployment of code fixes, and re-playing the data pipelines.</li> <li>Idempotency also ensures data-duplication is mitigated when replaying your data pipelines.</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html#testing","title":"Testing","text":"<p>Ensure data transformation code is testable</p> <ul> <li>Abstracting away data transformation code from data access code is key to ensuring unit tests can be written against data transformation logic. An example of this is moving transformation code from notebooks into packages.</li> <li>While it is possible to run tests against notebooks, by extracting the code into packages, you increase the developer productivity by increasing the speed of the feedback cycle.</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html#cicd-source-control-and-code-reviews","title":"CI/CD, Source Control and Code Reviews","text":"<ul> <li>All artifacts needed to build the data pipeline from scratch should be in source control. This included infrastructure-as-code artifacts, database objects (schema definitions, functions, stored procedures etc.), reference/application data, data pipeline definitions and data validation and transformation logic.</li> <li>Any new artifacts (code) introduced to the repository should be code reviewed, both automatically (linting, credential scanning etc.) and peer reviewed.</li> <li>There should be a safe, repeatable process (CI/CD) to move the changes through dev, test and finally production.</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html#security-and-configuration","title":"Security and Configuration","text":"<ul> <li>Maintain a central, secure location for sensitive configuration such as database connection strings that can be accessed by the appropriate services within the specific environment.</li> <li>On Azure this is typically solved through securing secrets in a Key Vault per environment, then having the relevant services query KeyVault for the configuration</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html#observability","title":"Observability","text":"<p>Monitor infrastructure, pipelines and data</p> <ul> <li>A proper monitoring solution should be in-place to ensure failures are identified, diagnosed and addressed in a timely manner. Aside from the base infrastructure and pipeline runs, data should also be monitored. A common area that should have data monitoring is the malformed record store.</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/data-heavy-design-guidance.html#end-to-end-and-azure-technology-samples","title":"End to End and Azure Technology Samples","text":"<p>The DataOps for the Modern Data Warehouse repo contains both end-to-end and technology specific samples on how to implement DataOps on Azure.</p> <p> Image: CI/CD for Data pipelines on Azure - from DataOps for the Modern Data Warehouse repo</p>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/distributed-system-design-reference.html","title":"Distributed System Design Reference","text":"<p>Distributed systems introduce new and interesting problems that need addressing. Software engineering as a field has dealt with these problems for years, and there are phenomenal resources available for reference when creating a new distributed system. Some that we recommend are as follows:</p> <ul> <li>Martin Fowler's Patterns of Distributed Systems</li> <li>microservices.io</li> <li>Azure's Cloud Design Patterns</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/micro-services.html","title":"Micro-services","text":"<p>The micro-services architecture is a design approach to build a single application as a set of small services. Each service runs in its own process and communicates with other services through a well-defined interface using a lightweight mechanism, typically an HTTP-based application programming interface (API). Microservices are built around business capabilities; each service is scoped to a single purpose. You can use different frameworks or programming languages to write micro-services and deploy them independently, as a single service, or as a group of services.</p>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/object-oriented-design-reference.html","title":"Object-Oriented Design Reference","text":"<p>When writing software for large projects, the hardest part is often communication and maintenance. Following proven design patterns can optimize for maintenance, readability, and ease of extension. In particular, object-oriented design patterns are well-established in the industry.</p> <p>Please refer to the following resources to create strong object-oriented designs:</p> <ul> <li>Class Diagram Overview</li> <li>Design Patterns Wikipedia</li> <li>Object Oriented Design Website</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/rest-api-design-guidance.html","title":"REST API Design Guidance","text":""},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/rest-api-design-guidance.html#goals","title":"Goals","text":"<ul> <li>Elevate Microsoft's published REST API design guidelines.</li> <li>Highlight common design decisions and factors to consider when designing.</li> <li>Provide additional resources to inform API design in areas not directly addressed by the Microsoft guidelines.</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/rest-api-design-guidance.html#common-api-design-decisions","title":"Common API Design Decisions","text":"<p>The Microsoft REST API guidelines provide design guidance covering a multitude of use-cases. The following sections are a good place to start as they are likely required considerations by any REST API design:</p> <ul> <li>URL Structure</li> <li>HTTP Methods</li> <li>HTTP Status Codes</li> <li>Collections</li> <li>JSON Standardizations</li> <li>Versioning</li> <li>Naming</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/rest-api-design-guidance.html#creating-api-contracts","title":"Creating API Contracts","text":"<p>As different development teams expose APIs to access various REST based services, it's important to have an API contract to share between the producer and consumers of APIs. Open API format is one of the most popular API description format. This Open API document can be produced in two ways:</p> <ul> <li>Design-First - Team starts developing APIs by first describing API designs as an Open API document and later generates server side boilerplate code with the help of this document.</li> <li>Code-First - Team starts writing the server side API interface code e.g. controllers, DTOs etc. and later generates and Open API document from it.</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/rest-api-design-guidance.html#design-first-approach","title":"Design-First Approach","text":"<p>A Design-First approach means that APIs are treated as \"first-class citizens\" and everything about a project revolves around the idea that at the end these APIs will be consumed by clients. So based on the business requirements API development team first start describing API designs as an Open API document and collaborate with the stakeholders to gather feedback.</p> <p>This approach is quite useful if a project is about developing externally exposed set of APIs which will be consumed by partners. In this approach, we first agree upon an API contract (Open API document) creating clear expectations on both API producer and consumer sides so both teams can begin work in parallel as per the pre-agreed API design.</p> <p>Key Benefits of this approach:</p> <ul> <li>Early API design feedback.</li> <li>Clearly established expectations for both consumer &amp; producer as both have agreed upon an API contract.</li> <li>Development teams can work in parallel.</li> <li>Testing team can use API contracts to write early tests even before business logic is in place. By looking at different models, paths, attributes and other aspects of the API testing can provide their input which can be very valuable.</li> <li>During an agile development cycle API definitions are not impacted by incremental dev changes.</li> <li>API design is not influenced by actual implementation limitations &amp; code structure.</li> <li>Server side boilerplate code e.g. controllers, DTOs etc. can be auto generated from API contracts.</li> <li>May improve collaboration between API producer &amp; consumer teams.</li> </ul> <p>Planning a Design-First Development:</p> <ol> <li>Identify use cases &amp; key services which API should offer.</li> <li>Identify key stakeholders of API and try to include them during API design phase to get continuous feedback.</li> <li>Write API contract definitions.</li> <li>Maintain consistent style for API status codes, versioning, error responses etc.</li> <li>Encourage peer reviews via pull requests.</li> <li>Generate server side boilerplate code &amp; client SDKs from API contract definitions.</li> </ol> <p>Important Points to consider:</p> <ul> <li>If API requirements changes often during initial development phase, than a Design-First approach may not be a good fit as this will introduce additional overhead, requiring repeated updates &amp; maintenance to the API contract definitions.</li> <li>It might be worthwhile to first try out your platform specific code generator and evaluate how much more additional work will be required in order to meet your project requirements and coding guidelines because it is possible that a particular platform specific code generator might not be able to generate a flexible &amp; maintainable implementation of actual code. For instance If your web framework requires annotations to be present on your controller classes (e.g. for API versioning or authentication), make sure that the code generation tool you use fully supports them.</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/rest-api-design-guidance.html#code-first-approach","title":"Code-First Approach","text":"<p>A Code-First approach means that development teams first implements server side API interface code e.g. controllers, DTOs etc. and than generates API contract definitions out of it. In current times this approach is more widely popular within developer community than Design-First Approach.</p> <p>This approach has the advantages of allowing the team to quickly implement APIs and also providing the flexibility to react very quickly to any unexpected API requirement changes.</p> <p>Key Benefits of this approach:</p> <ul> <li>Rapid development of APIs as development team can start implementing APIs much faster directly after understanding key requirements &amp; use cases.</li> <li>Development team has better control &amp; flexibility to implement server side API interfaces in a way which best suited for project structure.</li> <li>More popular among development teams so its easier to get consensus on a related topic and also has more ready to use code examples available on various blogs or developer forums regarding how to generate Open API definitions out of actual code.</li> <li>During initial phase of development where both API producer &amp; consumers requirements might change often this approach is better as it provides flexibility to quickly react on such changes.</li> </ul> <p>Important Points to consider:</p> <ul> <li>A generated Open API definition can become outdated, so its important to have automated checks to avoid this otherwise generated client SDKs will be out of sync and may cause issues for API consumers.</li> <li>With Agile development, it is hard to ensure that definitions embedded in runtime code remain stable, especially across rounds of refactoring and when serving multiple concurrent API versions.</li> <li>It might be useful to regularly generate Open API definition and store it in version control system otherwise generating the OpenAPI definition at runtime might makes it more complex in scenarios where that definition is required at development/CI time.</li> </ul>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/rest-api-design-guidance.html#how-to-interpret-and-apply-the-guidelines","title":"How to Interpret and Apply The Guidelines","text":"<p>The API guidelines document includes a section on how to apply the guidelines depending on whether the API is new or existing. In particular, when working in an existing API ecosystem, be sure to align with stakeholders on a definition of what constitutes a breaking change to understand the impact of implementing certain best practices.</p> <p>We do not recommend making a breaking change to a service that predates these guidelines simply for the sake of compliance.</p>"},{"location":"best-practices/continuous-planning/design-reviews/design-patterns/rest-api-design-guidance.html#additional-resources","title":"Additional Resources","text":"<ul> <li>Microsoft's Recommended Reading List for REST APIs</li> <li>Detailed HTTP status code definitions</li> <li>Semantic Versioning</li> <li>Other Public API Guidelines</li> <li>OpenAPI Design Practices</li> </ul>"},{"location":"learning/devops-sfia.html","title":"SFIA Framework","text":""},{"location":"learning/devops-sfia.html#overview","title":"Overview","text":"<p>The purpose of this guide it to give DevOps engineers a quick overview to what the SFIA framework and how it characterises the DevOps skillsets.</p> <p>If you are not already familiar with what SFIA is or why large enterprise organisations are starting to adopt this then take a look at the following:</p> <ul> <li>SFIA skills overview</li> </ul> <p>And for a DevOps specific skillset take a look at the following:</p> <ul> <li>SFIA DevOps Skills overview</li> <li>DevOps Skills at a glance</li> </ul> <p>Also it is worth considering the following roles when reading the content/skills listed below, as it is unlikely that ALL of the skills will be needed/found in a single person/role:</p> <ul> <li>DevOps Consultant - focuses on DevOps culture and Ways of working as below</li> <li>DevOps Engineer - focuses on DevOps automation as below</li> <li>Site Reliability Engineer - focus on SRE practices</li> </ul>"},{"location":"learning/devops-sfia.html#sfia-8-skills-by-category","title":"SFIA 8 - Skills by category","text":"Category Skill Levels DevOps Culture SLEN Systems and software life cycle engineering 4 - 7 BURM Risk management 3 -6 ORDI Organisation design and implementation 4 - 7 OCDV Organisational capability development 5 -7 RLMT Stakeholder relationship management 4 - 7 LEDA Competency assessment 3 - 6 MEAS Measurement 3 - 6 DLMG Systems development management 5 - 7 KNOW Knowledge management 2 - 7 PEMT Performance management 4 - 6 EEXP Employee experience 4 - 6 DevOps Automation CFMG Configuration management 2 - 6 PROG Programming/software development 2 - 6 TEST Testing 1 - 6 SINT Systems integration and build 2 - 6 RELM Release and deployment 3 - 6 BPTS Acceptance testing 2 - 6 DBAD Database administration 2 - 5 ITOP IT infrastructure 1 - 5 DevOps ways of working METL Methods and tools 3 - 6 REQM Requirements definition and management 2 - 6 SWDN Software design 2 - 6 ARCH Solution architecture 4 - 6 DESN Systems design 3 - 6 PBMG Problem management 3 - 5 USUP Incident management 2 - 5 VUAS Vulnerability assessment 2 - 5 PENT Penetration testing 3 - 6 CHMG Change control 2 - 6 SCTY Information security 3 - 7"},{"location":"learning/devops-sfia.html#devops-culture","title":"DevOps Culture","text":""},{"location":"learning/devops-sfia.html#systems-and-software-life-cycle-engineering","title":"Systems and software life cycle engineering","text":"<p>Establishing and deploying an environment for developing, continually improving, and securely operating software and systems products and services.</p> <p>This skill is associated with interdisciplinary approaches to developing and operating software and systems products and services across the full life cycle. Typically (but not exclusively) labelled with terms such as DevOps, DevSecOps, site reliability engineering, developer productivity engineering. Activities include \u2014 but are not limited to:</p> <ul> <li>establishing secure and reliable software lifecycle principles and practices</li> <li>developing a supporting framework of methods, procedures, techniques, tools, and people with required skills, knowledge and competencies</li> <li>deploying and using this environment with the people and teams that are responsible for all systems and software life cycle engineering</li> <li>building repeatable and reliable capabilities through a process of trial, feedback, learning and continual evolution</li> <li>adapting working practices to the needs of specific products and services</li> <li>defining, controlling and improving software life cycle processes</li> <li>building in risk management, quality, security, privacy and safety</li> <li>maximizing the automation of activities</li> <li>establishing software architecture and design principles to enable the desired life cycle processes</li> <li>focusing on mission, value and customers</li> <li>establishing a culture of collaboration, learning, knowledge management, adaptation and resilience</li> <li>adopting and integrating appropriate industry frameworks to guide improvements:</li> </ul>"},{"location":"learning/devops-sfia.html#risk-management","title":"Risk management","text":"<p>Planning and implementing organisation-wide processes and procedures for the management of risk to the success or integrity of the enterprise.</p> <p>Risk management can be applied to many enterprise functions as well as technical and engineering specialisms \u2014 such as, but not limited to, information and technology systems, operations, environmental, information and cyber-security, safety, energy supply. Risk is also explicitly referenced in many SFIA skills. Activities may include \u2014 but are not limited to:</p> <ul> <li>identifying risks</li> <li>classifying and prioritising risks \u2014 their impact and probability, and mitigation actions</li> <li>planning, developing, and implementing organisational approaches to risk management to ensure the integrity of the business, its products and services, and the end-users</li> <li>communicating and reporting on risks and mitigation actions to key stakeholders.</li> </ul>"},{"location":"learning/devops-sfia.html#organisation-design-and-implementation","title":"Organisation design and implementation","text":"<p>Planning, designing and implementing an integrated organisation structure and culture</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>facilitating changes needed to adapt to changes in technologies, society, new operating models and business processes</li> <li>identifying key attributes of the required culture and how these can be implemented and reinforced to bring about improved organisational performance.</li> </ul> <p>The scope of organisation design can be wide \u2014 including the workplace environment, location strategy and number of locations required, role profiles, performance measurements, competencies and skills.</p>"},{"location":"learning/devops-sfia.html#organisational-capability-development","title":"Organisational capability development","text":"<p>Providing leadership, advice and implementation support to assess organisational capabilities and to identify, prioritise and implement improvements.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>selecting, adopting and integrating appropriate industry frameworks and models to guide improvements</li> <li>using capability maturity assessments, metrics, process definition, process management</li> <li>building repeatable and reliable capabilities through a process of trial, feedback, learning and continual evolution</li> <li>developing appropriate techniques, tools and enhanced skills</li> <li>designing and delivering integrated people, process and technology solutions to deliver improved organisational performance in line with strategic plans and objectives</li> <li>identifying organisational priorities for enhancing performance, satisfying new business opportunities or responding to external drivers.</li> </ul> <p>The scope of improvement is typically organisation-wide but may also be highly focused on areas such as \u2014 but not limited to \u2014 business agility, software development, systems development, project delivery, service integration and management, service delivery, information and cyber-security.</p>"},{"location":"learning/devops-sfia.html#stakeholder-relationship-management","title":"Stakeholder relationship management","text":"<p>Influencing stakeholder attitudes, decisions, and actions for mutual benefit. Activities may include \u2014 but are not limited to:</p> <ul> <li>identifying stakeholders and analysing the relationships</li> <li>agreeing on mutually beneficial outcomes</li> <li>managing, monitoring and improving stakeholder relationships</li> <li>determining the relationship management approach to take \u2014 including roles and responsibilities, governance, policies, processes, tools and support mechanisms</li> <li>getting commitment to action through consultation and consideration of impacts.</li> <li>combining formal and informal communication channels to achieve the desired result</li> <li>operational management of stakeholder relationships and communications.</li> </ul> <p>The focus of this skill is a systematic and planned approach. This skill is not intended for general communication and developing productive working relationships. Those factors are described in SFIA's generic attributes and levels of responsibility.</p>"},{"location":"learning/devops-sfia.html#competency-assessment","title":"Competency assessment","text":"<p>Assessing knowledge, skills, competency and behaviors by any means, whether formal or informal, against frameworks such as SFIA.</p> <p>Assessments may be performed in many contexts such as \u2014 but not limited to \u2014 recruitment, career progression, professional development planning or accreditation/certification. Activities may include \u2014 but are not limited to:</p> <ul> <li>evaluating and selecting assessment options</li> <li>adopting or adapting assessment methods, tools, and techniques</li> <li>taking into account the context of the assessment and how the results of the assessment will be used</li> <li>aligning assessments with ethical, legal and regulatory requirements.</li> </ul> <p>Ethical, legal and regulatory requirements are necessary to ensure the integrity of assessments and when handling personal data.</p>"},{"location":"learning/devops-sfia.html#measurement","title":"Measurement","text":"<p>Developing and operating a measurement capability to support agreed organisational information needs.</p> <p>Measurement can be applied to organisations, projects, processes, and work products. Activities may include \u2014 but are not limited to:</p> <ul> <li>planning, implementation, and control of activities to measure attributes of processes, products, and services</li> <li>using measures to assess performance, progress, and provide indications and insights to actual or potential problems, issues, and risks</li> <li>identifying requirements for measurement</li> <li>implementing measurement to support iterative/agile working practices</li> <li>selecting measures and measurement scales, setting target values and thresholds</li> <li>establishing data collection and analysis methods \u2014 including automation.</li> </ul>"},{"location":"learning/devops-sfia.html#systems-development-management","title":"Systems development management","text":"<p>Planning, estimating and executing systems development work to time, budget and quality targets.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>adopting and adapting systems development life cycle models based on the context of the work and selecting appropriately from predictive (plan-driven) approaches or adaptive (iterative/agile) approaches</li> <li>collaboration and open communication with stakeholders with a focus on delivering value from systems development</li> <li>managing risks and allowing for timely adjustment of plans and deliverables to continue to meet customer requirements and deliver value</li> <li>aligning systems development activity and deliverables with architectures and standards and ensuring quality, security and privacy are built in</li> <li>developing roadmaps to communicate systems development plans</li> <li>identifying the resources needed for all stages (planning, estimation, execution) of systems development projects and how demand will be met with a supply capacity.</li> </ul>"},{"location":"learning/devops-sfia.html#knowledge-management","title":"Knowledge management","text":"<p>Managing vital knowledge to create value for the organisation.</p> <p>Knowledge management aims to improve performance, support decision-making and mitigate risks. Activities may include \u2014 but are not limited to:</p> <ul> <li>systematically capturing, sharing, developing and exploiting the collective knowledge of the organisation</li> <li>tailoring knowledge management approaches</li> <li>developing a supportive and collaborative knowledge sharing culture to drive the successful adoption of technology solutions for knowledge management</li> <li>providing access to informal, tacit knowledge as well as formal, documented, explicit knowledge</li> <li>facilitating internal and external collaboration and communications</li> <li>establishing and supporting communities of practice</li> <li>capturing, organising and developing information, knowledge and stories from employees, customers and external partners</li> <li>external benchmarking.</li> </ul>"},{"location":"learning/devops-sfia.html#performance-managemen","title":"Performance managemen","text":"<p>Improving organisational performance by developing the performance of individuals and workgroups to meet agreed objectives with measurable results.</p> <p>The term workgroup is used to be inclusive of different organisational structures. A workgroup is a collection of people working together on interdependent tasks to achieve shared objectives. This includes \u2014 but is not limited to \u2014 permanent/business-as-usual teams, cross-functional teams, squads or workgroups formed to deliver a specific outcome. Activities may include \u2014 but are not limited to:</p> <ul> <li>setting workgroup objectives aligned to organisational drivers</li> <li>supporting individual growth to achieve objectives</li> <li>forming effective teams</li> <li>developing effective working relations within the workgroup</li> <li>developing effective working relations with other workgroups, partners and individuals who they collaborate with to achieve workgroup objectives.</li> </ul>"},{"location":"learning/devops-sfia.html#employee-experience","title":"Employee experience","text":"<p>Enhancing employee engagement and ways of working, empowering employees and supporting their health and wellbeing.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>providing opportunities for personal growth and learning</li> <li>providing sufficient personal freedom to decide how to achieve work objectives, with support available when needed</li> <li>supporting different views, working styles and behaviors within the work environment</li> <li>providing a safe and secure working environment with the resources needed to do the job</li> <li>providing transparent communications and building trust in leadership</li> <li>providing a holistic approach in support of mental and physical well being.</li> </ul> <p>Note that the term employee is not limited to specific terms of employment. Depending on the employer it may include temporary and contract staff as well as salaried employees.</p>"},{"location":"learning/devops-sfia.html#devops-automation","title":"DevOps Automation","text":""},{"location":"learning/devops-sfia.html#configuration-management","title":"Configuration management","text":"<p>Planning, identifying, controlling, accounting for and auditing of configuration items (CIs) and their interrelationships.</p> <p>Configuration items (CIs) can include a wide variety of components (objects) such as \u2014 but not limited to \u2014 source code, software, products, systems, hardware, networks, buildings, suppliers, process definitions and documents. A coherent set of CIs forms a configuration. Activities may include \u2014 but are not limited to:</p> <ul> <li>identifying and documenting the functional and physical characteristics of CIs</li> <li>identifying the relationships and maintain coherence between CIs for specific configurations</li> <li>identifying the associated configuration(s), status, version and other characteristics of CIs at distinct points in time</li> <li>controlling changes to CI characteristics, recording and reporting change processing and implementation status</li> <li>systematically controlling changes to a configuration and maintaining the integrity, coherence, and traceability of that configuration throughout the project, system and/or service life cycle</li> <li>adhering to established safety, security and quality standards</li> <li>verifying and auditing CI records for data quality and compliance with specified internal and external requirements.</li> </ul> <p>Tooling examples: - Git SVN, Artifactory or Backstage.io</p>"},{"location":"learning/devops-sfia.html#programmingsoftware-development","title":"Programming/software development","text":"<p>Developing software components to deliver value to stakeholders. Activities may include \u2014 but are not limited to:</p> <ul> <li>identifying, creating and applying software development and security standards and processes</li> <li>planning and designing software components</li> <li>estimating time and effort required for software development</li> <li>constructing, amending and verifying software components</li> <li>applying test-driven development and ensuring appropriate test coverage</li> <li>using peer review techniques \u2014 such as pair programming</li> <li>documenting software components</li> <li>understanding and obtaining agreement to the value of the software components to be developed</li> <li>selecting appropriate development methods and life cycles</li> <li>applying recovery techniques to ensure the software being developed is not lost</li> <li>implementing appropriate change control to software development practices</li> <li>resolving operational problems with software and fixing bugs</li> </ul> <p>Depending on requirements and the characteristics of the project or assigned work \u2014 software development methods and life cycles can be predictive (plan-driven) approaches or adaptive (iterative/agile) approaches.</p> <p>Tooling examples:</p> <ul> <li>Learn at least one programming language such as Python, Go, Java or Scala, etc.</li> <li>Learn at least one scripting language such as Bash, PowerShell or Python, Ruby, Groovy, etc.</li> <li>Be comfortable working with an IDE or from CLI/Terminal</li> </ul>"},{"location":"learning/devops-sfia.html#testing","title":"Testing","text":"<p>Investigating products, systems and services to assess behavior and whether this meets specified or unspecified requirements and characteristics.</p> <p>The scope of testing includes technology, system components, configurations, packages and their interfaces. This skill is applicable to all testing methodologies \u2014 which can be delivered using predictive (plan-driven) approaches or adaptive (iterative/agile) approaches. Activities may include \u2014 but are not limited to:</p> <ul> <li>planning, designing, managing, executing and reporting of tests</li> <li>functional testing of capabilities or features</li> <li>non-functional testing of qualities such as \u2014 but not limited to \u2014 performance, security, access, backup and recovery, archiving and retention, robustness, availability, capacity, scalability, reliability, performance, stress, volume, maintainability and portability</li> <li>static testing and static analysis</li> <li>managing risks associated with testing and taking preventative action when needed</li> <li>adopting and adapting testing methods including waterfall, incremental or agile approaches</li> <li>conforming to agreed process standards, industry-specific regulations and data protection legislation</li> <li>engineering, using and maintaining testware to measure and improve the quality of the software being tested</li> <li>promoting productivity through test automation, tools and best practices</li> <li>developing scalable and reliable automated tests and frameworks.</li> </ul> <p>Tooling examples: SonarQube, Klockwork, Code Insight, etc. Practice examples: TDD, Linting &amp; SCA (e.g. embedding in VSCode),</p>"},{"location":"learning/devops-sfia.html#systems-integration-and-build","title":"Systems integration and build","text":"<p>Planning, implementing and controlling activities to synthesise system components to create operational systems, products or services.</p> <p>The scope of integration includes system elements, subsystems and interfaces including computing, storage, networking and cloud services. Systems integration is used to create systems for testing purposes as well as for operational use by customers and users. Activities may include \u2014 but are not limited to:</p> <ul> <li>developing organisational capabilities, processes and procedures for automation and continuous integration of build, packaging, testing, security and deployment</li> <li>building and operating a continuous integration (CI) capability when required employing version control of source code and related artefacts</li> <li>ensuring security and privacy requirements are an essential part of systems integration and build</li> <li>testing, validation and sign off of integration to satisfy requirements, architectures and design</li> <li>monitoring and controlling integration activities and recording and reporting on the results of integration</li> <li>keeping stakeholders informed and providing feedback into risk management processes</li> <li>developing and testing disaster recovery plans and applying incident management processes for major systems integrations.</li> </ul> <p>Tooling examples: Jenkins, Argo, GitHub, GitLab, Azure DevOps, etc.</p>"},{"location":"learning/devops-sfia.html#release-and-deployment","title":"Release and deployment","text":"<p>Applying the processes, systems and functions required to make new and changed services and features available for use.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>packaging and deploying software changes and updates for release into a live environment</li> <li>managing continuous delivery/deployment using automation tools for containerisation and orchestration</li> <li>using package management tools or application lifecycle management tools for software dependency, version and library control</li> <li>combining changes to form a release that delivers a new service or updates an existing service</li> <li>adhering to established safety, security and quality standards</li> <li>enabling the controlled and effective handover to operational management and the user community.</li> </ul> <p>Tooling examples: Docker Compose, Terraform, Nexus, Jenkins, GitHub, GitLab, etc. Practice examples: GitOps, GitFlow, SRE release management, etc.</p>"},{"location":"learning/devops-sfia.html#acceptance-testing","title":"Acceptance testing","text":"<p>Validating systems, products, business processes or services to determine whether the acceptance criteria have been satisfied.</p> <p>Activities include \u2014 but are not limited to:</p> <ul> <li>setting and applying standards for acceptance testing</li> <li>planning, identifying, designing, managing, executing and reporting on the outcomes of acceptance tests</li> <li>encouraging effective and efficient collaboration with a range of relevant stakeholders</li> <li>requesting and enabling formal acceptance of systems, products or services</li> <li>creating measurable acceptance criteria related to functional and non-functional requirements, features, business processes, user stories and business rules</li> <li>devising acceptance test cases and scenarios from acceptance criteria</li> <li>enabling exploratory testing by stakeholders to discover unexpected behaviors</li> <li>deploying model office testing to simulate real-world working practices and system usage.</li> </ul> <p>The acceptance testing approach will be based on the context of the work and may be selected from predictive (plan-driven) or adaptive (iterative/agile) approaches.</p>"},{"location":"learning/devops-sfia.html#database-administration","title":"Database administration","text":"<p>Installing, configuring, monitoring, maintaining and improving the performance of databases and data stores.</p> <p>Database administration may support live operational databases in production use or internal/interim databases used for iterative developments and testing. Activities may include \u2014 but are not limited to:</p> <ul> <li>identifying and acting on automation opportunities to improve performance and value from databases, data stores and data pipelines</li> <li>using database management system software and tools</li> <li>applying knowledge of the logical database schema.</li> </ul>"},{"location":"learning/devops-sfia.html#it-infrastructure","title":"IT infrastructure","text":"<p>Deploying, configuring and operating IT Infrastructure.</p> <p>IT infrastructure components include, but are not limited to, physical devices, virtual resources, infrastructure-related software, middleware, network services and data storage. Infrastructure components may be on-premises, outsourced, or provisioned as cloud services. Activities may include \u2014 but are not limited to:</p> <ul> <li>preparing for new or changed services to meet defined needs of organisational users or providers</li> <li>maintaining and enhancing the IT infrastructure and infrastructure components, including task automation via tools and coding</li> <li>managing and applying software updates</li> <li>building and managing systems and components in virtualised and cloud computing environments</li> <li>monitoring the performance of systems and services related to their contribution to organisation performance, security and sustainability.</li> </ul>"},{"location":"learning/devops-sfia.html#devops-ways-of-working","title":"DevOps ways of working","text":""},{"location":"learning/devops-sfia.html#methods-and-tools","title":"Methods and tools","text":"<p>Ensuring methods and tools are adopted and used effectively throughout the organisation.</p> <p>There is a wide range of methods and tools supporting areas such as \u2014 but not limited to \u2014 planning, development, testing, operation, management and maintenance of systems. Activities may include \u2014 but are not limited to:</p> <ul> <li>assessing, selecting and implementing methods and tools</li> <li>measuring, tailoring, improving and automating the use of methods and tools.</li> </ul>"},{"location":"learning/devops-sfia.html#requirements-definition-and-management","title":"Requirements definition and management","text":"<p>Managing requirements through the entire delivery and operational life cycle.</p> <p>Requirements may be related to software, systems, data, processes, products or services. Activities may include \u2014 but are not limited to:</p> <ul> <li>eliciting and analysing requirements \u2014 both functional and non-functional</li> <li>ensuring that customer requirements and priorities are accurately reflected</li> <li>organising and prioritising requirements using techniques such as \u2014 but not limited to \u2014 product roadmaps, epics, user stories and backlogs</li> <li>specifying and validating requirements and constraints to a level that enables effective development and operations of new or changed software, systems, processes, products or services</li> <li>negotiating trade-offs that are acceptable to key stakeholders and within budgetary, technical, regulatory, and other constraints</li> <li>adopting and adapting requirements management life cycle models.</li> </ul> <p>The requirements life cycle approach will be based on the context of the work and may be selected from predictive (plan-driven) or adaptive (iterative/agile) approaches.</p>"},{"location":"learning/devops-sfia.html#software-design","title":"Software design","text":"<p>Specifying and designing software to meet defined requirements by following agreed design standards and principles.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>designing software applications, components, interfaces and related characteristics (including security)</li> <li>using design concepts and patterns to develop software design and provide the basis for software construction and verification</li> <li>evaluating alternative solutions and trade-offs to facilitate design decisions</li> <li>taking into account functional and non-functional requirements such as the target environment, performance, security and existing systems</li> <li>developing prototypes/simulations to enable informed decision-making</li> <li>adopting and adapting software design models, tools and techniques based on the context of the work.</li> </ul> <p>Depending on requirements and project or work assigned characteristics, software design techniques can be predictive (plan-driven) or adaptive (iterative/agile) approaches.</p>"},{"location":"learning/devops-sfia.html#solution-architecture","title":"Solution architecture","text":"<p>Developing and communicating a multi-dimensional solution architecture to deliver agreed business outcomes.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>defining the planned operation and maintenance of the solution within a production environment \u2014 include changes to services, process, organisation, and operating models as well as technology</li> <li>ensuring that existing and planned solution components are compatible with relevant architectures, strategies, policies, standards and practices</li> <li>considering requirements for security, privacy and testing of solutions</li> <li>taking account of relevant architectures, strategies, policies, standards and practices</li> <li>identifying appropriate cloud services</li> <li>developing roadmaps to migrate components to cloud services</li> <li>developing and communicating an implementation roadmap</li> <li>providing guidance and risk-based governance to support solution implementation including managing requests for changes and deviations from specifications.</li> </ul>"},{"location":"learning/devops-sfia.html#systems-design","title":"Systems design","text":"<p>Designing systems to meet specified requirements and agreed systems architectures.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>using design concepts to develop system design and provide the basis for systems construction and verification</li> <li>designing or selecting system components</li> <li>designing systems compatible with cloud computing architectures and selection of components such as infrastructure as a service, platform as a service and software as a service</li> <li>developing a complete set of detailed models, properties, and/or characteristics described in a form suitable for implementation</li> <li>adopting and adapting of system design life cycle models based on the context of the work using predictive (plan-driven) approaches or adaptive (iterative/agile) approaches for system design</li> <li>adhering to regulatory requirements and organisational standards including security.</li> </ul>"},{"location":"learning/devops-sfia.html#problem-management","title":"Problem management","text":"<p>Managing the life cycle of all problems that have occurred or could occur in delivering a service.</p> <p>The primary objectives of problem management are to:</p> <ul> <li>proactively prevent problems and resulting incidents from happening</li> <li>reactively resolve problems that have already happened</li> <li>eliminate recurring incidents</li> <li>minimise the impact of incidents that cannot be prevented.</li> </ul> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>detecting and logging problems</li> <li>classifying and prioritising problems</li> <li>initiating actions to resolve problems</li> <li>investigating and diagnosing problems</li> <li>implementing remedies to prevent future incidents</li> <li>reporting on problems.</li> </ul>"},{"location":"learning/devops-sfia.html#incident-management","title":"Incident management","text":"<p>Coordinating responses to incident reports, minimising negative impacts and restoring service as quickly as possible.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>designing and implementing different processes and procedures for different categories of incidents including \u2014 but not limited to \u2014 major incidents, information or cybersecurity incidents, complex incidents, low impact incidents</li> <li>establishing incident response teams or security incident response teams</li> <li>routing requests for help to appropriate functions for resolution</li> <li>monitoring resolution activity</li> <li>informing users, customers and key stakeholders of progress towards service restoration.</li> </ul> <p>Incidents can impact many areas \u2014 such as but not limited to \u2014 business operations, information security, IT systems, services, employees, customers, or other vital business functions.</p> <p>Different roles/groups may be needed to diagnose and resolve incidents \u2014 such as \u2014 users, subject matter experts, service desk, support teams, suppliers, partners. Although they play a part in the incident management process, they do not necessarily need incident management skills.</p>"},{"location":"learning/devops-sfia.html#vulnerability-assessment","title":"Vulnerability assessment","text":"<p>Identifying and classifying security vulnerabilities in networks, systems and applications and mitigating or eliminating their impact.</p> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>cataloguing and classifying information and technology resources (assets and capabilities) to support vulnerability assessment</li> <li>assigning quantifiable value, rank order and importance to information and technology resources</li> <li>identifying and analysing the vulnerabilities of each resource \u2014 manually or using automated tools and information sources</li> <li>prioritising, scoring and ranking the risk associated with vulnerabilities</li> <li>business impact assessment</li> <li>mitigating or eliminating the vulnerabilities.</li> </ul> <p>Vulnerability assessment tools include web application scanners, protocol scanners and network scanners.</p>"},{"location":"learning/devops-sfia.html#penetration-testing","title":"Penetration testing","text":"<p>Testing the effectiveness of security controls by emulating the tools and techniques of likely attackers.</p> <p>Penetration testing may be a stand-alone activity or an aspect of acceptance testing prior to an approval to operate. Activities include \u2014 but are not limited to:</p> <ul> <li>ethical hacking \u2014 using the same tools and techniques as an adversary to safely exploit security weaknesses</li> <li>demonstrating how an adversary can subvert security goals or achieve specific adversarial objectives</li> <li>evaluating the effectiveness of current/planned defense or mitigation controls</li> <li>assuring the security of networks, systems, and applications</li> <li>identifying insights into the business risks of various vulnerabilities</li> <li>testing network, infrastructure, web and mobile applications for weaknesses</li> <li>checking patch levels and configurations</li> <li>social engineering.</li> </ul>"},{"location":"learning/devops-sfia.html#change-control","title":"Change control","text":"<p>Assessing risks associated with proposed changes and ensuring changes to products, services or systems are controlled and coordinated.</p> <p>Change control is applied to anything that impacts live products, services or systems. This typically includes \u2014 applications, infrastructure, documentation, processes, configuration items, suppliers. Activities may include \u2014 but are not limited to:</p> <ul> <li>managing the lifecycle of change requests \u2014 registering, assessing, authorising, planning, deploying</li> <li>assessing risks and reducing risks to the availability, performance, security and compliance of the products and services impacted by the change</li> <li>developing processes for standard, normal or emergency changes</li> <li>developing methods and tools to automate change control processes to enable continuous integration.</li> </ul>"},{"location":"learning/devops-sfia.html#information-security","title":"Information security","text":"<p>Defining and operating a framework of security controls and security management strategies.</p> <p>The purpose of security controls and management strategies is to:</p> <ul> <li>maintain the security, confidentiality, integrity, availability, accountability of information systems</li> <li>ensure information systems comply with legislation, regulation and relevant standards.</li> </ul> <p>Activities may include \u2014 but are not limited to:</p> <ul> <li>selecting, adopting and adapting security control frameworks</li> <li>designing, justifying and implementing security management strategies</li> <li>identifying risks with technical solution architectures</li> <li>ensuring security principles are applied during design and development to reduce risk.</li> </ul> <p>Examples of types of security controls include \u2014 but are not limited to:</p> <ul> <li>physical controls</li> <li>procedural or administrative controls</li> <li>technical or logical controls</li> <li>legal and regulatory or compliance controls.</li> </ul> <p>These activities are typically performed in collaboration with specialists in other areas including \u2014 but not limited to \u2014 legal, technical infrastructure, audit, architecture, software engineering.</p>"},{"location":"the-basics/calms.html","title":"CALMS","text":""},{"location":"the-basics/calms.html#calms-culture-automation-lean-measurement-sharing","title":"CALMS (Culture, Automation, Lean, Measurement, Sharing)","text":"<p>The CALMS framework is used as a means of assessing whether an organization is ready to adopt DevOps processes, or how an organization is progressing in their DevOps transformation. It is based on the following five pillars:</p> <ul> <li> <p>Culture. Before silos can be torn down, there needs to be a culture of shared responsibility, or at least a group of people devoted to establishing that culture in a grassroots type of way, with management approval and support.   Automation. Similar to the technical practices centered around continuous delivery mentioned above, teams undertaking a DevOps transformation should be devoted to automating as many manual tasks as possible, especially with respect to continuous integration and test automation.</p> </li> <li> <p>Lean. Development teams are making use of lean principles to eliminate waste and optimize the value stream, such as minimizing WIP, making work visible, and reducing hand-off complexity and wait times.   Measurement. The organization is devoted to collecting data on their processes, deployments, etc., in order to understand their current capabilities and where improvements could be achieved.</p> </li> <li> <p>Sharing. A culture of openness and sharing within and between teams (and enabled with the proper tools) keeps everyone working toward the same goals and eases friction with hand-offs when issues arise.   Three key practices that help promote a virtuous cycle\u2014positive outcomes that continue to be reinforced and strengthened as they are iterated on\u2014as you mature DevOps in your organization. These three high-level concepts encompass, and when they\u2019re tackled in order, a continuous, virtuous cycle can gradually gain momentum.</p> </li> </ul>"},{"location":"the-basics/calms.html#they-are-the-3cs-culture-collaboration-continuous-improvement","title":"They are the 3Cs: - Culture - Collaboration - Continuous Improvement","text":""},{"location":"the-basics/calms.html#culture","title":"Culture","text":"<p>Once again, culture is a broad term that can mean different things to different people. It is one of the foundational aspects of DevOps that other technical and management practices must be built upon to succeed. As Accelerate authors discuss, Ron Westrum\u2019s culture typologies for organizations can range from pathological (power-oriented) to bureaucratic (rule-oriented) to generative (performance-oriented). A generative culture is one in which bridging between teams is encouraged, risks are shared, and failure leads to inquiry, rather than finger-pointing. Working toward these cultural paradigm shifts\u2014and giving them time to take hold through practice\u2014is an important first step.</p>"},{"location":"the-basics/calms.html#collaboration","title":"Collaboration","text":"<p>Once the groundwork of a generative culture is laid\u2014one in which everyone feels safe enough to \u201cput themselves out there,\u201d experiment, admit failures, and try again without fear of punishment or shame\u2014greater collaboration can begin to be unlocked within and among teams.</p> <p>Empowered employees are more open to sharing and receiving feedback, and the more those actions are witnessed, the more others on the team will begin to emulate similar behaviors. Overall performance and shared goals begin to be prioritized over protecting oneself or one\u2019s silo.</p>"},{"location":"the-basics/calms.html#continuous-improvement","title":"Continuous Improvement","text":"<p>Finally, once the teams are collaborating well, with everyone taking personal responsibility for performance, the continuous improvement piece begins to take care of itself. Here is where leadership can continue to reinforce a learning culture as well, one where taking time outside of the usual job responsibilities to work on personal and organizational improvements is key to keeping this virtuous cycle\u2019s momentum going.</p>"},{"location":"the-basics/calms.html#in-conclusion","title":"In conclusion\u2026","text":"<p>Every organization will implement these concepts differently. For example, some may choose Kanban over Scrum as means of collaboration; some may prefer Circle CI over Jenkins for CI/CD. What\u2019s important to realize is that, regardless of implementation details, decisions should be guided by and also reinforce the concepts of Culture, Collaboration, and Continuous Improvement.</p>"},{"location":"the-basics/calms.html#resources","title":"Resources","text":"<p>CLAMS Framework by Atlassian - CALMS Framework | Atlassian</p>"},{"location":"the-basics/devops-vs-sre.html","title":"DevOps Vs SRE","text":"<p>This article originated from a blog on Harness's website - dated Nov 3, 2021</p>"},{"location":"the-basics/devops-vs-sre.html#overview","title":"Overview","text":"<p>In a nutshell, DevOps Engineers are ops-focused engineers who solve development pipeline problems. Site Reliability Engineers are development-focused engineers who solve operational/scale/reliability problems.</p> <p></p> <p>Software is certainly eating the world, and as our dependence on technology increases, disciplines have arisen to ensure that changes are rolled out efficiently and our systems are there when we need them. The rise of DevOps and Site Reliability Engineering cultures and practices has risen to the mainstream over the past years.</p> <p>Being a DevOps Engineer or SRE are certainly in-demand job titles and skillsets to have. Not to fall into the eponym of \u201cCI/CD\u201d while saying \u201cDevOps/SRE,\u201d understanding the overlap and differences between the two skillsets and organizations is important. Both solve very distinct challenges with unique and innovative approaches, ushering in new paradigms in technology.</p>"},{"location":"the-basics/devops-vs-sre.html#what-are-the-differences-between-sres-and-devops","title":"What Are the Differences Between SREs and DevOps?","text":"<p>Having more efficient and reliable systems are not new goals in technology. Like many other facets of technology, the learnings and science behind both goals have increased to warrant specialized organizations and engineers.</p> <p>The DevOps movement is all about breaking down silos. The quintessential disconnect of the development team and operations team is exactly what DevOps Engineers and leaders are trying to solve. This divide makes sense, as those who write software were typically not those who run the software. Years of these practices take time to untangle in organizations and changing mindsets are hard to forecast.</p> <p></p> <p>Having reliable systems at scale is a complex problem to solve. As systems become more distributed in nature, ensuring reliability or the appearance of reliability across the vast topology of moving parts is challenging. Internal and external customers alike expect systems to be available all the time, and even a brief outage (downtime) or reduction in uptime can be detrimental to a firm\u2019s reputation and bottom line.</p> <p>In a nutshell, DevOps Engineers are ops-focused engineers who solve development pipeline problems. Site Reliability Engineers are development-focused engineers who solve operational/scale/reliability problems. Both sets of engineers are crossing the chasm by bringing their expertise and opinions to the other side of the equation. Though, we are human and fallible, and subject to Conway\u2019s Law.</p>"},{"location":"the-basics/devops-vs-sre.html#conways-law-at-play","title":"Conway\u2019s Law At Play","text":"<p>A popular organizational item to talk about in DevOps culture is Conway\u2019s Law. If you are unfamiliar with Conway\u2019s Law, it is an adage stating that organizations design systems which mirror their own communication structure. We are people, and us as people, design systems. Looking at DevOps team structures, DevOps teams are focused on breaking down organizational silos that were created by Conway\u2019s Law and creating a cultural shift toward collaboration and communication. These silos that are institutional are barriers in engineering efficiency; two or more sets of people to get features across the line and be operational with separate goals. Reading one of the quintessential DevOps pieces, Gene Kim\u2019s The Phoenix Project, illustrates how problems can be tossed across the proverbial wall.</p> <p>The adage that reliability is everyone\u2019s responsibility is true, but the core of innovation work is that we are trying things for the first time. Where DevOps focuses more on the merging and removal of the silos, Site Reliability Engineering focuses on the craft of reliability. Reading one of the quintessential SRE pieces, Google\u2019s SRE Book, there is more of a focus on approach and respecting the complexity for operating systems at scale.</p> <p>Because we are all still fighting Conway\u2019s Law, having a solid DevOps team does not mean you have site reliability down. The vice versa is true: just because you have site reliability down doesn\u2019t mean that you have engineering efficiency that a DevOps investment brings. They are solving for two different domains.</p>"},{"location":"the-basics/devops-vs-sre.html#two-different-problem-sets","title":"Two Different Problem Sets","text":"<p>Engineering efficiency and reliability are two separate domains, but have some overlap. There is a correlation between agility and more robust systems. A counter-argument might be made that agility brings about a fast velocity of change, and change is a detriment to reliability. Today\u2019s challenges are faced at scale, and as we continue to push the boundaries, adjusting on-the-fly is important. The problems that both teams solve are telling to the culture and skills needed for both to thrive.</p>"},{"location":"the-basics/devops-vs-sre.html#what-problems-do-devops-teams-solve","title":"What Problems Do DevOps Teams Solve?","text":"<p>Engineering efficiency can have a wide paintbrush. If you take a look at certain DevOps job postings, it can sound like the job poster is looking for an entire IT organization in one person. The SDLC (software delivery life cycle) can be a windy road to traverse. DevOps teams strive to remove bottlenecks across the entire SDLC by removing barriers to production and automation. With the adoption of Agile, production changes are being created and needing to be deployed at a faster velocity, as incremental changes are now the expectation.</p> <p>The DevOps teams are purveyors of development tools, from providing guidance at the inception of the SDLC with source code management (SCM) recommendations to enabling Continuous Integration and Continuous Delivery in an organization. With a wide gamut of responsibilities, DevOps teams can have ownership and oversight over a number of tools and platforms. SREs, on the other hand, focus on system health. Lastly, it\u2019s important to note the DevOps pillars as these can offer more detail into what DevOps teams solve for.</p>"},{"location":"the-basics/devops-vs-sre.html#what-problems-do-sres-solve","title":"What Problems Do SREs Solve?","text":"<p>Site Reliability Engineering teams focus on safety, health, uptime, and the ability to remedy unforeseen problems. A romanticized idea is that SREs are only sprung into action during an incident, helping devise remedies for problems until the engineering teams can make proper remediation. Certainly, an important pillar of the job is combating incidents, and SREs spend a good deal of time making sure the firefight doesn\u2019t occur with their vast expertise.</p> <p>By removing some of the complex burdens in how to scale and maintain uptime in distributed systems, SRE practices allow development teams to focus on feature development instead of the nuances of achieving and maintaining service level commitments.</p>"},{"location":"the-basics/devops-vs-sre.html#slas-slos-and-slis","title":"SLAs, SLOs, and SLIs","text":"<p>Both DevOps and SRE teams value metrics, as you can\u2019t improve on what you can\u2019t measure. Indicators and measurements of how well a system is performing can be represented by one of the Service Level (SLx) commitments. There is a trio of metrics, SLAs, SLOs, and SLIs, that paint a picture of the agreement made vs the objectives and actuals to meet the agreement. With SLOs and SLIs, you can garner insight into the health of a system.</p> <p></p>"},{"location":"the-basics/devops-vs-sre.html#slas","title":"SLAs","text":"<p>Service Level Agreements are the commitment/agreement you make with your customers. Your customers might be internal, external, or another system. SLAs are usually crafted around customer expectations or system expectations. SLAs have been around for some time, and most engineers would consider an SLA to be \u201cwe need to reply in 2000ms or less,\u201d which in today\u2019s nomenclature would actually be an SLO. An SLA, in that case, would be \u201cwe require 99% uptime.\u201d</p>"},{"location":"the-basics/devops-vs-sre.html#slos","title":"SLOs","text":"<p>Service Level Objectives are goals that need to be met in order to meet SLAs. Looking at Tom Wilkie\u2019s RED method can help you come up with good metrics for SLOs: requests, errors, and duration. In the above example of \u201cwe need to reply in 2000ms or less 99% of the time,\u201d that would fall under duration, or the amount of time it takes to complete a request in your system. Google\u2019s Four Golden Signals are also great metrics to have as SLOs, but also includes saturation. Measuring SLOs is the purpose of SLIs.</p>"},{"location":"the-basics/devops-vs-sre.html#slis","title":"SLIs","text":"<p>Service Level Indicators measure compliance/conformance with an SLO. Harping on the \u201cwe need to reply in 2000ms or less 99% of the time\u201d SLO from above, the SLI would be the actual measurement. Maybe 98% of requests have a reply in less than 2000ms, which is not up to the goal of the SLO. If SLOs/SLIs are being broken, time should be spent to remedy/fix issues related to the slowdowns</p> <p>For DevOps teams, system health and availability does not mean engineering efficiency is being met. Another set of metrics to look at for DevOps teams are the Accelerate metrics.</p>"},{"location":"the-basics/devops-vs-sre.html#accelerate-metrics-for-devops-teams","title":"Accelerate Metrics for DevOps Teams","text":"<p>You can have the most resilient and robust system in the world, but if your customers are not completing their journeys, adoption and success will be hard to attain. In Accelerate, a book by Nicole Forsgren, Jez Humble, and Gene Kim, we dig into the organizational science of high-performing technology teams.</p> <p>The authors recommended measuring software delivery performance into four key metrics. Lead Time, Deployment Frequency, Mean Time to Restore (MTTR), and Change Failure Percentage.</p>"},{"location":"the-basics/devops-vs-sre.html#lead-time","title":"Lead Time","text":"<p>In lean manufacturing, the lead time is the amount of time it takes from a customer request to the fulfillment of that request. In the technology domain, this can be the time from when code is checked in to when the code is deployed into production.</p>"},{"location":"the-basics/devops-vs-sre.html#deployment-frequency","title":"Deployment Frequency","text":"<p>The number of times that deployments to production occur in an amount of time. Are you deploying to production every day, week, month, year? The more frequently your internal customers can deploy, certainly the more efficient the software delivery process is.</p>"},{"location":"the-basics/devops-vs-sre.html#mean-time-to-restore","title":"Mean Time To Restore","text":"<p>Taking another page from lean manufacturing, MTTR is an incident metric that calculates an average time to restore a system. In the software sense, restoring is rolling back to the last known version of the application. Mean Time to Repair is when the repairing starts, e.g the start of the rollback. The \u201crestore\u201d portion of Mean Time to Restore is when the system is back to its previous functionality.</p>"},{"location":"the-basics/devops-vs-sre.html#change-failure-percentage","title":"Change Failure Percentage","text":"<p>This represents the percentage of changes in production that fail. After navigating all of the confidence-building exercises leading up to production, with the number of unknowns in production, a change will fail. Lowering the change failure rate allows for more confidence in production. In modern delivery methods, failing more often early (in a lower environment) is key vs failing in production.</p> <p>Harness has the ability out of the box to visualize Accelerate metrics, allowing for this data to be shared, thus enabling collaboration across the enterprise.</p> <p></p> <p>When comparing concerns of DevOps teams vs SRE teams, we can see where the overlap and differences appear further.</p> <p>DevOps vs SRE Concern Table</p> <p>Comparing different DevOps concerns vs SRE concerns.</p> Concern DevOps SRE When asked 'What Do You Do Around Here?\" Mange the Development pipeline Resilience, scaling, uptime, robustness TL;DR A System engineer, who primarily focuses on development problems. A Software engineer, focusing on operational problems. Does the Application Cluster? Yes, the application does. We need three nodes. We use a RAFT-based leader-elected clustering mechanism focused on Apache Zookeeper. We front the application with Apache Mesos to work through Dominant Resource Fairness constraints. Can We Have Monitoring? Yes, we use Prometheus, ELK, and FluentD and can provide hooks into each. Concerned about the science around how the monitoring tool works. Black box vs white box monitoring and specific metrics about each. Advising teams on pros/cons. Our Deployment Failed. The pipelines we created allow you to re-run. If additional debugging is needed, we can connect the dots with log/trace systems. Unless it caused an outage, we wouldn\u2019t get involved to help with the remedy. If the deployment regularly fails, we can work to help decipher why. Typical Metrics Deployment frequency, deployment failure rate. Error budgets, SLOs, SLIs, Four Golden Signals War Chant \u201cPeople, Process, Technology &amp; Automation!\u201d \u201cThere is no root cause!\u201d <p>The level of detail that SREs take a look at are more tool-agnostic and approach-centric vs DevOps teams providing tools and pipelines for engineering organizations to further the mission. Both skillsets and teams are certainly important in any modern organization.</p>"},{"location":"the-basics/devops-vs-sre.html#sre-and-devops-better-together","title":"SRE and DevOps, Better Together","text":"<p>Both can be viewed as leveraged resources; clearly, there is not a 1:1 ratio of a Software Engineer to DevOps Engineers (though it can feel like it as organizations try to scale) or Site Reliability Engineers. O\u2019Reilly\u2019s Building Secure and Reliable Systems, when compared to the first rendition of Google\u2019s SRE Book, discusses team structure poisoning SREs as advisors/experts.</p> <p>Building software at scale requires specialized engineers to help tackle problems and further capabilities. DevOps Engineers, SREs, and other engineers such as Application Security Engineers fall into the category of specialized advisors. Google, in its SRE Book, described all the expertise across multiple domains needed to launch and maintain a product like Gmail, which surprised even me. Harness is here to enable and partner with engineering organizations. The Harness Platform is well-positioned to help further the mission of your DevOps and SRE teams.</p>"},{"location":"the-basics/glossary.html","title":"DevOps Glossary","text":"<p>This list of DevOps terms are as defined by the DevOps Institute.:</p> <p>Click on the following bookmarks to jump to a specific section:</p> <p>| A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | Y | X | Z |</p> <p></p>"},{"location":"the-basics/glossary.html#a-terms","title":"A-Terms","text":"Term Definition A/B Testing Deploy different versions of an EUT to different customers and let the customer feedback determine which is best. Administration Testing The purpose of the test is to determine if an End User Test (EUT) is able to process administration tasks as expected. Agile A project management method for complex projects that divides tasks into small \"sprints\" of work with frequent reassessment and adaption of plans Agile Coach Help teams master Agile development and DevOps practices; enables productive ways of working and collaboration. Agile Manifesto A formal proclamation of values and principles to guide an iterative and people-centric approach to software development. Agile Portfolio Management Involves evaluating in-flight project and proposed future initiatives to shape and govern the ongoing investment in projects and discretionary work. Agile Principles The twelve principle that underpin the Agile Manifesto Agile Process Owner An ITSM or other type of process own that uses Agile and Scrum principles and practices to design, manage and measure individual processes. Agile Service Manager The operational equivalent to Dev's ScrumMaster. A role within an IT organisation that understand how to leverage Agile and Scrum methods to improve the design speed and agility of ITSM processes. Agile Software Development Group of software development methods in which requirement and solutions evolve through collaboration between self-organising, cross-functional teams. Usually applied using the Scrum or Scaled Agile Framework approach. Amazon Web Services (AWS) AWS is a secure cloud services platform offering comupute power, database storage, content delivery and other functionality to help businesses scale and grow. Analytics Test results processed and presented in an organised manner in accordance with analysis methods and criterion Andon (Cord) A system that gives an assembly line worker the ability, and moreover the empowerment, to stop production when a defect is found and immediately call for assistance. Ant-pattern A commonly reinvented but poor solution to a problem. Anti-fragility Anti-fragility is a property of systems that increases it capability to thrive as a result of stressors, shocks, volatility, noise, mistakes, faults, attacks, or failures. Application Programming Interface (API) A set of protocols used to create applications for a specific OS or as an interface between modules or applications. API Testing The purpose of the test is to determine if na API for an EUT functions as expected. Application Release Controlled continuous delivery pipeline capabilities including automation (release upon code commit). Application Testing The purpose of the test is to determine if an application is performing according to its requirements and expected behaviors. Architecture The fundamental underlying design of computer hardware, software or both in combination. Artifact Any element in a software development project including documentation, test plans, images, data files and executable modules. Artifact Repository Store for binaries, reports and metadata. Example tools include: JFog Artifactory, Sonatype Nexus or Azure Artifacts. Audi Management The use of automated tools to ensure products and services are auditable, including keeping audit logs of build, test and deploy activities, auditing configurations and users, as well as log files from production operations. Authentication The process of verifying an asserted identity. Authentication can be based on what you know 9e.g. password or PIN), what you have (token or one-time code), what you are (biometrics) or contextual information. Authorisation The process of granting roles to users to have access to resources Auto-DevOps Auto DevOps brings DevOps best practices to your project by automatically configuring software development lifecycles. It automatically detects, builds, test, deploys and monitors applications. Auto-scaling The ability to automatically and elastically scale and de-scale infrastructure depending on traffic and capacity variations while maintaining control of costs. Automated Rollback If a failure is detected during a deployment, an operator (or automated process) will verify the failure and rollback the failing release to the previous known working state. Availability Availability is the proportion of time a system is in a functioning condition and therefore available (to users) to be used."},{"location":"the-basics/glossary.html#b-terms","title":"B-Terms","text":"Term Definition Backlog Requirements for a system, expressed as a prioritized list of product backlog items usual in the form of 'User Stories'. The product backlog is prioritized by the Product Owner and should include functional, non-functional and technical team-generated requirements. Basic Security Hygiene A common set of minimum-security practices that must be applied to all environments without exception. Practices include basic network security hardening, vulnerability and patch management, logging and monitoring, basic polices and enforcement and identity and access management. Batch Sizes Refers to the volume of features involved in a single code release Behavior Driven Development Test cases are created by simulating an EUT's externally observable inputs, and outputs. Example tool: Cucumber. Beyond Budgeting A management model that looks beyond command-and-control towards a more empowered and adaptive state. Black-Box Test case only uses knowledge of externally observable behaviors of an EUT. Blameless Postmortems Used for impact analysis of service incidents. When a particular IT service fails, the users, customers, other dependent service that are affected. Blast Radius Used for impact analysis of service incidents. When a particular IT service fails, the users, customers, and other dependent services that are affected. Blue/Green Deployments Taking software from the final stage of testing to live production using two environments labelled Blue and Green. Once the software is working in the green environment, switch the route so that all incoming requests go to the green environment - the blue one is now idle or used for new feature updates. Bug An error or defect in software that results in an unexpected or system-degrading condition. Burndown Chart A chart showing the evolution of remaining effort against time. Bursting Public cloud resources are added as needed to temporarily increase the total computing capacity of a private cloud. Business Case Justification for a proposed project or undertaking on the basis of its expected commercial benefit. Business Continuity Business continuity is an organisation's ability to ensure operations and core business functions are not severely impacted by a disaster or unplanned incident that take critical services offline. Business Transformation Changing how the business functions. Making this a reality means changing culture, processes, and technologies in order to better align everyone around delivering on the organisation's mission. Business Value The benefit of an approach to key business KPIs"},{"location":"the-basics/glossary.html#c-terms","title":"C-Terms","text":"Term Definition Cadence Flow or rhythm of events CALMS Model Considered the pillars of values of DevOps: Culture, Automation, Lean, Measurement, Sharing (as put forth by John Willis, Damon Edwards and Jez Humble). Canary Testing A canary (also called a canary test) is a push of code changes to a small number of end users who have not volunteered to test anything. Similar to incremental rollout, it is where a small portion of the user base is updated to a new version first. THis subset, the canaries, then serve as the proverbial \"canary in the coal mine\". If something goes wrong then a release is rolled back and only a small subset of the users are impacted. Capacity Test The purpose of the test is to determine if the EUT can handle expected loads such as number of users, number of sessions, aggregate bandwidth. Capture-Replay Test cases are created by capturing live interactions with the EUT, in a format that can be replayed by a tool. e.g. Selenium Carrots Positive incentives, for encouraging and rewarding desired behaviors. Change Addition, modification or removal of anything that could have an effect on IT services (ITIL definition). Change Failure Rate A measure of the time from a request for change to delivery of the change. Change Management Process that controls all changes throughout their lifecycle (ITIL definition). Chaos Engineering The disciple of experimenting on a software system in production in order to build confidence in the systems capability to withstand turbulent and unexpected conditions. Chapter Lead A squad line manager in the Spotify model who is responsible for traditional people management duties, is involved in day to day work and grow individual and chapter competence. Chapters A small family of people having similar skills and who work within the same general competency area within the same tribe. Chapters meet regularly to discuss challenges and areas of expertise in order to promote sharing, skill development, re-use and problem solving. ] ChatOps An approach to managing technical and business operations (coined by GitHub) that involves a combination of group chat and integration with DevOps tools. Example tools include Atlassian HipChat/Stride, Microsoft Teams, Slack. Check-In Action of submitting a software change into a system version management system. CI Regression TestA subset of regression test that are run immediately after a software components is built. Same as Smoke Clear-Box Same as Glass-Box Testing and White-Box Testing Cloud Computing The practice of using remote servers hosted on the internet to host applications rather than local servers in a private datacenter. Cloud-Native Native cloud application (NCA) are designed for cloud computing Cluster Cost Optimization Tools like Kubcost, Replex, Cloudability use monitoring to analyze container clusters and optimize the resource deployment model Cluster Monitoring Tools that let you know the health of your deployment environments running in clusters such as Kubernetes Clustering A group of computers (called notes or members) work together as a cluster connected through a fast network acting as a single system Code Coverage A measure of white box test coverage by counting code units that are executed by a test. The code unit may be a code statement, a code branch, or control path or data path through a code module. Code Quality See also static code analysis, Sonar and Checkmarks are examples of tools that automatically check the seven main dimensions of code quality - comments, architecture, duplication, unit test coverage, complexity, potential defects, language rules Code Repository A repository where developers can commit and collaborate on their code. It also tracks historical versions and potentially identifies conflicting versions of the same code. Also referred to as repository' or 'repo'. Code Review Software engineers inspect each others source code to detect coding or code formatting errors. Cognitive Bias Cognitive bias is a limitation in objective thinking that is caused by the tendency for the human brain to perceive information through a filter of personal experience and preferences: a systematic pattern of deviation from morn or rationality in judgement. Collaboration People jointly working with others towards a common goal. Collaborative Culture A culture that applies to everyone which incorporates an expected set of behaviors, language and accepted ways of working with each other reinforcement by leadership. Compatibility Test Test with the purpose to determine if and EUT interoperates with another EUT such as peer-to-peer applications or protocols Configuration Management CM is a systems engineering process for establishing and maintaining consistency of a products performance, functional, and physical attributes with its requirements, design, and operational information throughout its life. Conformance Test The purpose of the test is to determine if an EUT complies to a standard. Constraint Limitation or restriction; something that constrains. See also bottleneck Container A way of packaging software into lightweight, stand-alone, executable packages including everything needed to run it (code, runtime, system tools, system,libraries, settings). Container Network Security Used to prove that any app that can be run on a container cluster with any other app can be confident that there is no unintended use of the other app or any unintended network traffic between them."},{"location":"the-basics/glossary.html#d-terms","title":"D - Terms","text":"Term Definition"},{"location":"the-basics/how-to-get-started.html","title":"How to Get Started","text":"<p>Transitioning to DevOps requires a change in culture and mindset. At its simplest, DevOps is about removing the barriers between two traditionally siloed teams, development and operations. In some organizations, there may not even be separate development and operations teams; engineers may do both. With DevOps, the two teams work together to optimize both the productivity of developers and the reliability of operations. They strive to communicate frequently, increase efficiencies, and improve the quality of services they provide to customers. They take full ownership for their services, often beyond where their stated roles or titles have traditionally been scoped by thinking about the end customer\u2019s needs and how they can contribute to solving those needs. Quality assurance and security teams may also become tightly integrated with these teams. Organizations using a DevOps model, regardless of their organizational structure, have teams that view the entire development and infrastructure lifecycle as part of their responsibilities.</p>"},{"location":"the-basics/how-to-get-started.html#devops-practices-explained","title":"DevOps Practices Explained","text":"<p>There are a few key practices that help organizations innovate faster through automating and streamlining the software development and infrastructure management processes. Most of these practices are accomplished with proper tooling.</p> <p>One fundamental practice is to perform very frequent but small updates. This is how organizations innovate faster for their customers. These updates are usually more incremental in nature than the occasional updates performed under traditional release practices. Frequent but small updates make each deployment less risky. They help teams address bugs faster because teams can identify the last deployment that caused the error. Although the cadence and size of updates will vary, organizations using a DevOps model deploy updates much more often than organizations using traditional software development practices.</p> <p>Organizations might also use a 'cloud-native' architecture to make their applications more flexible and enable quicker innovation. The cloud-native (aka micro-services) architecture decouples large, complex systems into simple, independent projects. Applications are broken into many individual components (services) with each service scoped to a single purpose or function and operated independently of its peer services and the application as a whole. This architecture reduces the coordination overhead of updating applications, and when each service is paired with small, agile teams who take ownership of each service, organizations can move more quickly.</p> <p>However, the combination of micro-services and increased release frequency leads to significantly more deployments which can present operational challenges. Thus, DevOps practices like continuous integration and continuous delivery solve these issues and let organizations deliver rapidly in a safe and reliable manner. Infrastructure automation practices, like infrastructure as code and configuration management, help to keep computing resources elastic and responsive to frequent changes. In addition, the use of monitoring and logging helps engineers track the performance of applications and infrastructure so they can react quickly to problems. Together, these practices help organizations deliver faster, more reliable updates to their customers. Here is an overview of important DevOps practices.</p> <p>Check out my Best Practices section of this site for more details</p>"},{"location":"tools/git/git-cheatsheet.html","title":"Git Cheatsheet","text":"<p>The following pages contains some useful info and commands to help you get the most out of Git:</p> <ul> <li>As a simple starting point I have found that GitLab's version of a CheatSheetis easy to understand.</li> <li>For a full Git reference see this Git SCM Book.</li> </ul>"},{"location":"tools/git/git-cheatsheet.html#troubleshooting-git-issues","title":"Troubleshooting Git Issues","text":"<p>As with any tool you can sometimes run into issues, this section covers specific areas that I have come accross and how I went about solving these</p>"},{"location":"tools/git/git-cheatsheet.html#git-case-sensitivity-or-capitalization","title":"Git Case sensitivity or capitalization","text":"<p>if you are moving files between different operating systems; sometime you can run into an issue where git is not case aware e.g. file name is 'Example' where you want to use 'example'. whilst you may rename these files locally in your dev environment, however when you commit these changes into git it does not seem to recognise the issue. To solve this you can simply:</p> <ol> <li>ensure you are in your local git directory</li> <li>run the 'git rm -r --cached . ' command to remove ALL local cache from this directory.</li> <li>then re-add all files using the 'git add .' command</li> <li>continue as normal by committing your changes.</li> </ol>"}]}